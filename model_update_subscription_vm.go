/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateSubscriptionVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSubscriptionVM{}

// UpdateSubscriptionVM struct for UpdateSubscriptionVM
type UpdateSubscriptionVM struct {
	CloudBaseVM
	Name NullableString `json:"name,omitempty"`
	Locale NullableString `json:"locale,omitempty"`
	Tags []string `json:"tags,omitempty"`
	DefaultPermissions *DefaultPermissionsVM `json:"defaultPermissions,omitempty"`
	T string `json:"$t"`
}

type _UpdateSubscriptionVM UpdateSubscriptionVM

// NewUpdateSubscriptionVM instantiates a new UpdateSubscriptionVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSubscriptionVM(t string) *UpdateSubscriptionVM {
	this := UpdateSubscriptionVM{}
	this.T = t
	return &this
}

// NewUpdateSubscriptionVMWithDefaults instantiates a new UpdateSubscriptionVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSubscriptionVMWithDefaults() *UpdateSubscriptionVM {
	this := UpdateSubscriptionVM{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSubscriptionVM) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSubscriptionVM) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdateSubscriptionVM) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdateSubscriptionVM) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdateSubscriptionVM) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdateSubscriptionVM) UnsetName() {
	o.Name.Unset()
}

// GetLocale returns the Locale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSubscriptionVM) GetLocale() string {
	if o == nil || IsNil(o.Locale.Get()) {
		var ret string
		return ret
	}
	return *o.Locale.Get()
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSubscriptionVM) GetLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locale.Get(), o.Locale.IsSet()
}

// HasLocale returns a boolean if a field has been set.
func (o *UpdateSubscriptionVM) HasLocale() bool {
	if o != nil && o.Locale.IsSet() {
		return true
	}

	return false
}

// SetLocale gets a reference to the given NullableString and assigns it to the Locale field.
func (o *UpdateSubscriptionVM) SetLocale(v string) {
	o.Locale.Set(&v)
}
// SetLocaleNil sets the value for Locale to be an explicit nil
func (o *UpdateSubscriptionVM) SetLocaleNil() {
	o.Locale.Set(nil)
}

// UnsetLocale ensures that no value is present for Locale, not even an explicit nil
func (o *UpdateSubscriptionVM) UnsetLocale() {
	o.Locale.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSubscriptionVM) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSubscriptionVM) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateSubscriptionVM) HasTags() bool {
	if o != nil && IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateSubscriptionVM) SetTags(v []string) {
	o.Tags = v
}

// GetDefaultPermissions returns the DefaultPermissions field value if set, zero value otherwise.
func (o *UpdateSubscriptionVM) GetDefaultPermissions() DefaultPermissionsVM {
	if o == nil || IsNil(o.DefaultPermissions) {
		var ret DefaultPermissionsVM
		return ret
	}
	return *o.DefaultPermissions
}

// GetDefaultPermissionsOk returns a tuple with the DefaultPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionVM) GetDefaultPermissionsOk() (*DefaultPermissionsVM, bool) {
	if o == nil || IsNil(o.DefaultPermissions) {
		return nil, false
	}
	return o.DefaultPermissions, true
}

// HasDefaultPermissions returns a boolean if a field has been set.
func (o *UpdateSubscriptionVM) HasDefaultPermissions() bool {
	if o != nil && !IsNil(o.DefaultPermissions) {
		return true
	}

	return false
}

// SetDefaultPermissions gets a reference to the given DefaultPermissionsVM and assigns it to the DefaultPermissions field.
func (o *UpdateSubscriptionVM) SetDefaultPermissions(v DefaultPermissionsVM) {
	o.DefaultPermissions = &v
}

// GetT returns the T field value
func (o *UpdateSubscriptionVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *UpdateSubscriptionVM) SetT(v string) {
	o.T = v
}

func (o UpdateSubscriptionVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSubscriptionVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Locale.IsSet() {
		toSerialize["locale"] = o.Locale.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.DefaultPermissions) {
		toSerialize["defaultPermissions"] = o.DefaultPermissions
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *UpdateSubscriptionVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateSubscriptionVM := _UpdateSubscriptionVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateSubscriptionVM)

	if err != nil {
		return err
	}

	*o = UpdateSubscriptionVM(varUpdateSubscriptionVM)

	return err
}

type NullableUpdateSubscriptionVM struct {
	value *UpdateSubscriptionVM
	isSet bool
}

func (v NullableUpdateSubscriptionVM) Get() *UpdateSubscriptionVM {
	return v.value
}

func (v *NullableUpdateSubscriptionVM) Set(val *UpdateSubscriptionVM) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSubscriptionVM) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSubscriptionVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSubscriptionVM(val *UpdateSubscriptionVM) *NullableUpdateSubscriptionVM {
	return &NullableUpdateSubscriptionVM{value: val, isSet: true}
}

func (v NullableUpdateSubscriptionVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSubscriptionVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


