/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// DataSourceStatus the model 'DataSourceStatus'
type DataSourceStatus string

// List of DataSourceStatus
const (
	CONNECTED DataSourceStatus = "Connected"
	ERROR DataSourceStatus = "Error"
	UPDATING DataSourceStatus = "Updating"
)

// All allowed values of DataSourceStatus enum
var AllowedDataSourceStatusEnumValues = []DataSourceStatus{
	"Connected",
	"Error",
	"Updating",
}

func (v *DataSourceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataSourceStatus(value)
	for _, existing := range AllowedDataSourceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataSourceStatus", value)
}

// NewDataSourceStatusFromValue returns a pointer to a valid DataSourceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataSourceStatusFromValue(v string) (*DataSourceStatus, error) {
	ev := DataSourceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataSourceStatus: valid values are %v", v, AllowedDataSourceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataSourceStatus) IsValid() bool {
	for _, existing := range AllowedDataSourceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataSourceStatus value
func (v DataSourceStatus) Ptr() *DataSourceStatus {
	return &v
}

type NullableDataSourceStatus struct {
	value *DataSourceStatus
	isSet bool
}

func (v NullableDataSourceStatus) Get() *DataSourceStatus {
	return v.value
}

func (v *NullableDataSourceStatus) Set(val *DataSourceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceStatus(val *DataSourceStatus) *NullableDataSourceStatus {
	return &NullableDataSourceStatus{value: val, isSet: true}
}

func (v NullableDataSourceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

