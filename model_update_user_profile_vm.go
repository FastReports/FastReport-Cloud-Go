/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateUserProfileVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserProfileVM{}

// UpdateUserProfileVM struct for UpdateUserProfileVM
type UpdateUserProfileVM struct {
	CloudBaseVM
	Name NullableString `json:"name,omitempty"`
	Username NullableString `json:"username,omitempty"`
	Email NullableString `json:"email,omitempty"`
	PasswordNew NullableString `json:"passwordNew,omitempty"`
	PasswordNew2 NullableString `json:"passwordNew2,omitempty"`
	T string `json:"$t"`
}

type _UpdateUserProfileVM UpdateUserProfileVM

// NewUpdateUserProfileVM instantiates a new UpdateUserProfileVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserProfileVM(t string) *UpdateUserProfileVM {
	this := UpdateUserProfileVM{}
	this.T = t
	return &this
}

// NewUpdateUserProfileVMWithDefaults instantiates a new UpdateUserProfileVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserProfileVMWithDefaults() *UpdateUserProfileVM {
	this := UpdateUserProfileVM{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserProfileVM) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserProfileVM) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdateUserProfileVM) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdateUserProfileVM) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdateUserProfileVM) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdateUserProfileVM) UnsetName() {
	o.Name.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserProfileVM) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserProfileVM) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *UpdateUserProfileVM) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *UpdateUserProfileVM) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *UpdateUserProfileVM) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *UpdateUserProfileVM) UnsetUsername() {
	o.Username.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserProfileVM) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserProfileVM) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateUserProfileVM) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *UpdateUserProfileVM) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *UpdateUserProfileVM) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *UpdateUserProfileVM) UnsetEmail() {
	o.Email.Unset()
}

// GetPasswordNew returns the PasswordNew field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserProfileVM) GetPasswordNew() string {
	if o == nil || IsNil(o.PasswordNew.Get()) {
		var ret string
		return ret
	}
	return *o.PasswordNew.Get()
}

// GetPasswordNewOk returns a tuple with the PasswordNew field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserProfileVM) GetPasswordNewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PasswordNew.Get(), o.PasswordNew.IsSet()
}

// HasPasswordNew returns a boolean if a field has been set.
func (o *UpdateUserProfileVM) HasPasswordNew() bool {
	if o != nil && o.PasswordNew.IsSet() {
		return true
	}

	return false
}

// SetPasswordNew gets a reference to the given NullableString and assigns it to the PasswordNew field.
func (o *UpdateUserProfileVM) SetPasswordNew(v string) {
	o.PasswordNew.Set(&v)
}
// SetPasswordNewNil sets the value for PasswordNew to be an explicit nil
func (o *UpdateUserProfileVM) SetPasswordNewNil() {
	o.PasswordNew.Set(nil)
}

// UnsetPasswordNew ensures that no value is present for PasswordNew, not even an explicit nil
func (o *UpdateUserProfileVM) UnsetPasswordNew() {
	o.PasswordNew.Unset()
}

// GetPasswordNew2 returns the PasswordNew2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserProfileVM) GetPasswordNew2() string {
	if o == nil || IsNil(o.PasswordNew2.Get()) {
		var ret string
		return ret
	}
	return *o.PasswordNew2.Get()
}

// GetPasswordNew2Ok returns a tuple with the PasswordNew2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserProfileVM) GetPasswordNew2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PasswordNew2.Get(), o.PasswordNew2.IsSet()
}

// HasPasswordNew2 returns a boolean if a field has been set.
func (o *UpdateUserProfileVM) HasPasswordNew2() bool {
	if o != nil && o.PasswordNew2.IsSet() {
		return true
	}

	return false
}

// SetPasswordNew2 gets a reference to the given NullableString and assigns it to the PasswordNew2 field.
func (o *UpdateUserProfileVM) SetPasswordNew2(v string) {
	o.PasswordNew2.Set(&v)
}
// SetPasswordNew2Nil sets the value for PasswordNew2 to be an explicit nil
func (o *UpdateUserProfileVM) SetPasswordNew2Nil() {
	o.PasswordNew2.Set(nil)
}

// UnsetPasswordNew2 ensures that no value is present for PasswordNew2, not even an explicit nil
func (o *UpdateUserProfileVM) UnsetPasswordNew2() {
	o.PasswordNew2.Unset()
}

// GetT returns the T field value
func (o *UpdateUserProfileVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *UpdateUserProfileVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *UpdateUserProfileVM) SetT(v string) {
	o.T = v
}

func (o UpdateUserProfileVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserProfileVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.PasswordNew.IsSet() {
		toSerialize["passwordNew"] = o.PasswordNew.Get()
	}
	if o.PasswordNew2.IsSet() {
		toSerialize["passwordNew2"] = o.PasswordNew2.Get()
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *UpdateUserProfileVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateUserProfileVM := _UpdateUserProfileVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateUserProfileVM)

	if err != nil {
		return err
	}

	*o = UpdateUserProfileVM(varUpdateUserProfileVM)

	return err
}

type NullableUpdateUserProfileVM struct {
	value *UpdateUserProfileVM
	isSet bool
}

func (v NullableUpdateUserProfileVM) Get() *UpdateUserProfileVM {
	return v.value
}

func (v *NullableUpdateUserProfileVM) Set(val *UpdateUserProfileVM) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserProfileVM) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserProfileVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserProfileVM(val *UpdateUserProfileVM) *NullableUpdateUserProfileVM {
	return &NullableUpdateUserProfileVM{value: val, isSet: true}
}

func (v NullableUpdateUserProfileVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserProfileVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


