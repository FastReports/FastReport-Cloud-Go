/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// DataSourceSorting the model 'DataSourceSorting'
type DataSourceSorting string

// List of DataSourceSorting
const (
	CREATED_TIME DataSourceSorting = "CreatedTime"
	EDITED_TIME DataSourceSorting = "EditedTime"
	NAME DataSourceSorting = "Name"
)

// All allowed values of DataSourceSorting enum
var AllowedDataSourceSortingEnumValues = []DataSourceSorting{
	"CreatedTime",
	"EditedTime",
	"Name",
}

func (v *DataSourceSorting) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataSourceSorting(value)
	for _, existing := range AllowedDataSourceSortingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataSourceSorting", value)
}

// NewDataSourceSortingFromValue returns a pointer to a valid DataSourceSorting
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataSourceSortingFromValue(v string) (*DataSourceSorting, error) {
	ev := DataSourceSorting(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataSourceSorting: valid values are %v", v, AllowedDataSourceSortingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataSourceSorting) IsValid() bool {
	for _, existing := range AllowedDataSourceSortingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataSourceSorting value
func (v DataSourceSorting) Ptr() *DataSourceSorting {
	return &v
}

type NullableDataSourceSorting struct {
	value *DataSourceSorting
	isSet bool
}

func (v NullableDataSourceSorting) Get() *DataSourceSorting {
	return v.value
}

func (v *NullableDataSourceSorting) Set(val *DataSourceSorting) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceSorting) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceSorting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceSorting(val *DataSourceSorting) *NullableDataSourceSorting {
	return &NullableDataSourceSorting{value: val, isSet: true}
}

func (v NullableDataSourceSorting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceSorting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

