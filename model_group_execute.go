/*
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// GroupExecute the model 'GroupExecute'
type GroupExecute int32

// List of GroupExecute
const (
	_0 GroupExecute = 0
	_MINUS_1 GroupExecute = -1
)

var allowedGroupExecuteEnumValues = []GroupExecute{
	0,
	-1,
}

func (v *GroupExecute) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupExecute(value)
	for _, existing := range allowedGroupExecuteEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupExecute", value)
}

// NewGroupExecuteFromValue returns a pointer to a valid GroupExecute
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupExecuteFromValue(v int32) (*GroupExecute, error) {
	ev := GroupExecute(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupExecute: valid values are %v", v, allowedGroupExecuteEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupExecute) IsValid() bool {
	for _, existing := range allowedGroupExecuteEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupExecute value
func (v GroupExecute) Ptr() *GroupExecute {
	return &v
}

type NullableGroupExecute struct {
	value *GroupExecute
	isSet bool
}

func (v NullableGroupExecute) Get() *GroupExecute {
	return v.value
}

func (v *NullableGroupExecute) Set(val *GroupExecute) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupExecute) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupExecute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupExecute(val *GroupExecute) *NullableGroupExecute {
	return &NullableGroupExecute{value: val, isSet: true}
}

func (v NullableGroupExecute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupExecute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

