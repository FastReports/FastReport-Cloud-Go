/*
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
)

// SubscriptionInvitesVM struct for SubscriptionInvitesVM
type SubscriptionInvitesVM struct {
	Invites []SubscriptionInviteVM `json:"invites,omitempty"`
	Count *int64 `json:"count,omitempty"`
}

// NewSubscriptionInvitesVM instantiates a new SubscriptionInvitesVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionInvitesVM() *SubscriptionInvitesVM {
	this := SubscriptionInvitesVM{}
	return &this
}

// NewSubscriptionInvitesVMWithDefaults instantiates a new SubscriptionInvitesVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionInvitesVMWithDefaults() *SubscriptionInvitesVM {
	this := SubscriptionInvitesVM{}
	return &this
}

// GetInvites returns the Invites field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionInvitesVM) GetInvites() []SubscriptionInviteVM {
	if o == nil  {
		var ret []SubscriptionInviteVM
		return ret
	}
	return o.Invites
}

// GetInvitesOk returns a tuple with the Invites field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionInvitesVM) GetInvitesOk() (*[]SubscriptionInviteVM, bool) {
	if o == nil || o.Invites == nil {
		return nil, false
	}
	return &o.Invites, true
}

// HasInvites returns a boolean if a field has been set.
func (o *SubscriptionInvitesVM) HasInvites() bool {
	if o != nil && o.Invites != nil {
		return true
	}

	return false
}

// SetInvites gets a reference to the given []SubscriptionInviteVM and assigns it to the Invites field.
func (o *SubscriptionInvitesVM) SetInvites(v []SubscriptionInviteVM) {
	o.Invites = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *SubscriptionInvitesVM) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionInvitesVM) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *SubscriptionInvitesVM) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *SubscriptionInvitesVM) SetCount(v int64) {
	o.Count = &v
}

func (o SubscriptionInvitesVM) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Invites != nil {
		toSerialize["invites"] = o.Invites
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriptionInvitesVM struct {
	value *SubscriptionInvitesVM
	isSet bool
}

func (v NullableSubscriptionInvitesVM) Get() *SubscriptionInvitesVM {
	return v.value
}

func (v *NullableSubscriptionInvitesVM) Set(val *SubscriptionInvitesVM) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionInvitesVM) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionInvitesVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionInvitesVM(val *SubscriptionInvitesVM) *NullableSubscriptionInvitesVM {
	return &NullableSubscriptionInvitesVM{value: val, isSet: true}
}

func (v NullableSubscriptionInvitesVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionInvitesVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


