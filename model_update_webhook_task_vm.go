/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateWebhookTaskVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWebhookTaskVM{}

// UpdateWebhookTaskVM struct for UpdateWebhookTaskVM
type UpdateWebhookTaskVM struct {
	UpdateTransportTaskBaseVM
	Headers map[string]string `json:"headers,omitempty"`
	Url NullableString `json:"url,omitempty"`
	T string `json:"$t"`
}

type _UpdateWebhookTaskVM UpdateWebhookTaskVM

// NewUpdateWebhookTaskVM instantiates a new UpdateWebhookTaskVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWebhookTaskVM(t string) *UpdateWebhookTaskVM {
	this := UpdateWebhookTaskVM{}
	this.T = t
	return &this
}

// NewUpdateWebhookTaskVMWithDefaults instantiates a new UpdateWebhookTaskVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWebhookTaskVMWithDefaults() *UpdateWebhookTaskVM {
	this := UpdateWebhookTaskVM{}
	return &this
}

// GetHeaders returns the Headers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateWebhookTaskVM) GetHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateWebhookTaskVM) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return &o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *UpdateWebhookTaskVM) HasHeaders() bool {
	if o != nil && IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *UpdateWebhookTaskVM) SetHeaders(v map[string]string) {
	o.Headers = v
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateWebhookTaskVM) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateWebhookTaskVM) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *UpdateWebhookTaskVM) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *UpdateWebhookTaskVM) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *UpdateWebhookTaskVM) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *UpdateWebhookTaskVM) UnsetUrl() {
	o.Url.Unset()
}

// GetT returns the T field value
func (o *UpdateWebhookTaskVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *UpdateWebhookTaskVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *UpdateWebhookTaskVM) SetT(v string) {
	o.T = v
}

func (o UpdateWebhookTaskVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWebhookTaskVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedUpdateTransportTaskBaseVM, errUpdateTransportTaskBaseVM := json.Marshal(o.UpdateTransportTaskBaseVM)
	if errUpdateTransportTaskBaseVM != nil {
		return map[string]interface{}{}, errUpdateTransportTaskBaseVM
	}
	errUpdateTransportTaskBaseVM = json.Unmarshal([]byte(serializedUpdateTransportTaskBaseVM), &toSerialize)
	if errUpdateTransportTaskBaseVM != nil {
		return map[string]interface{}{}, errUpdateTransportTaskBaseVM
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *UpdateWebhookTaskVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateWebhookTaskVM := _UpdateWebhookTaskVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateWebhookTaskVM)

	if err != nil {
		return err
	}

	*o = UpdateWebhookTaskVM(varUpdateWebhookTaskVM)

	return err
}

type NullableUpdateWebhookTaskVM struct {
	value *UpdateWebhookTaskVM
	isSet bool
}

func (v NullableUpdateWebhookTaskVM) Get() *UpdateWebhookTaskVM {
	return v.value
}

func (v *NullableUpdateWebhookTaskVM) Set(val *UpdateWebhookTaskVM) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWebhookTaskVM) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWebhookTaskVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWebhookTaskVM(val *UpdateWebhookTaskVM) *NullableUpdateWebhookTaskVM {
	return &NullableUpdateWebhookTaskVM{value: val, isSet: true}
}

func (v NullableUpdateWebhookTaskVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWebhookTaskVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


