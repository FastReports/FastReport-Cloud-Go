/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
)

// checks if the SelectedFilesVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectedFilesVM{}

// SelectedFilesVM struct for SelectedFilesVM
type SelectedFilesVM struct {
	IsAllSelected *bool `json:"isAllSelected,omitempty"`
	Files []string `json:"files,omitempty"`
	Folders []string `json:"folders,omitempty"`
}

// NewSelectedFilesVM instantiates a new SelectedFilesVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectedFilesVM() *SelectedFilesVM {
	this := SelectedFilesVM{}
	return &this
}

// NewSelectedFilesVMWithDefaults instantiates a new SelectedFilesVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectedFilesVMWithDefaults() *SelectedFilesVM {
	this := SelectedFilesVM{}
	return &this
}

// GetIsAllSelected returns the IsAllSelected field value if set, zero value otherwise.
func (o *SelectedFilesVM) GetIsAllSelected() bool {
	if o == nil || IsNil(o.IsAllSelected) {
		var ret bool
		return ret
	}
	return *o.IsAllSelected
}

// GetIsAllSelectedOk returns a tuple with the IsAllSelected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectedFilesVM) GetIsAllSelectedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAllSelected) {
		return nil, false
	}
	return o.IsAllSelected, true
}

// HasIsAllSelected returns a boolean if a field has been set.
func (o *SelectedFilesVM) HasIsAllSelected() bool {
	if o != nil && !IsNil(o.IsAllSelected) {
		return true
	}

	return false
}

// SetIsAllSelected gets a reference to the given bool and assigns it to the IsAllSelected field.
func (o *SelectedFilesVM) SetIsAllSelected(v bool) {
	o.IsAllSelected = &v
}

// GetFiles returns the Files field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SelectedFilesVM) GetFiles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SelectedFilesVM) GetFilesOk() ([]string, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *SelectedFilesVM) HasFiles() bool {
	if o != nil && IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []string and assigns it to the Files field.
func (o *SelectedFilesVM) SetFiles(v []string) {
	o.Files = v
}

// GetFolders returns the Folders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SelectedFilesVM) GetFolders() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Folders
}

// GetFoldersOk returns a tuple with the Folders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SelectedFilesVM) GetFoldersOk() ([]string, bool) {
	if o == nil || IsNil(o.Folders) {
		return nil, false
	}
	return o.Folders, true
}

// HasFolders returns a boolean if a field has been set.
func (o *SelectedFilesVM) HasFolders() bool {
	if o != nil && IsNil(o.Folders) {
		return true
	}

	return false
}

// SetFolders gets a reference to the given []string and assigns it to the Folders field.
func (o *SelectedFilesVM) SetFolders(v []string) {
	o.Folders = v
}

func (o SelectedFilesVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectedFilesVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsAllSelected) {
		toSerialize["isAllSelected"] = o.IsAllSelected
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if o.Folders != nil {
		toSerialize["folders"] = o.Folders
	}
	return toSerialize, nil
}

type NullableSelectedFilesVM struct {
	value *SelectedFilesVM
	isSet bool
}

func (v NullableSelectedFilesVM) Get() *SelectedFilesVM {
	return v.value
}

func (v *NullableSelectedFilesVM) Set(val *SelectedFilesVM) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectedFilesVM) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectedFilesVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectedFilesVM(val *SelectedFilesVM) *NullableSelectedFilesVM {
	return &NullableSelectedFilesVM{value: val, isSet: true}
}

func (v NullableSelectedFilesVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectedFilesVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


