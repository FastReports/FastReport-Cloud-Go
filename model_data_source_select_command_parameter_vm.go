/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataSourceSelectCommandParameterVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSourceSelectCommandParameterVM{}

// DataSourceSelectCommandParameterVM struct for DataSourceSelectCommandParameterVM
type DataSourceSelectCommandParameterVM struct {
	CloudBaseVM
	Name string `json:"name"`
	DataType string `json:"dataType"`
	DefaultValue NullableString `json:"defaultValue,omitempty"`
	Size *int32 `json:"size,omitempty"`
	T string `json:"$t"`
}

type _DataSourceSelectCommandParameterVM DataSourceSelectCommandParameterVM

// NewDataSourceSelectCommandParameterVM instantiates a new DataSourceSelectCommandParameterVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSourceSelectCommandParameterVM(name string, dataType string, t string) *DataSourceSelectCommandParameterVM {
	this := DataSourceSelectCommandParameterVM{}
	this.T = t
	return &this
}

// NewDataSourceSelectCommandParameterVMWithDefaults instantiates a new DataSourceSelectCommandParameterVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceSelectCommandParameterVMWithDefaults() *DataSourceSelectCommandParameterVM {
	this := DataSourceSelectCommandParameterVM{}
	return &this
}

// GetName returns the Name field value
func (o *DataSourceSelectCommandParameterVM) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DataSourceSelectCommandParameterVM) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DataSourceSelectCommandParameterVM) SetName(v string) {
	o.Name = v
}

// GetDataType returns the DataType field value
func (o *DataSourceSelectCommandParameterVM) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *DataSourceSelectCommandParameterVM) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *DataSourceSelectCommandParameterVM) SetDataType(v string) {
	o.DataType = v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataSourceSelectCommandParameterVM) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataSourceSelectCommandParameterVM) GetDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *DataSourceSelectCommandParameterVM) HasDefaultValue() bool {
	if o != nil && o.DefaultValue.IsSet() {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given NullableString and assigns it to the DefaultValue field.
func (o *DataSourceSelectCommandParameterVM) SetDefaultValue(v string) {
	o.DefaultValue.Set(&v)
}
// SetDefaultValueNil sets the value for DefaultValue to be an explicit nil
func (o *DataSourceSelectCommandParameterVM) SetDefaultValueNil() {
	o.DefaultValue.Set(nil)
}

// UnsetDefaultValue ensures that no value is present for DefaultValue, not even an explicit nil
func (o *DataSourceSelectCommandParameterVM) UnsetDefaultValue() {
	o.DefaultValue.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DataSourceSelectCommandParameterVM) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceSelectCommandParameterVM) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DataSourceSelectCommandParameterVM) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *DataSourceSelectCommandParameterVM) SetSize(v int32) {
	o.Size = &v
}

// GetT returns the T field value
func (o *DataSourceSelectCommandParameterVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *DataSourceSelectCommandParameterVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *DataSourceSelectCommandParameterVM) SetT(v string) {
	o.T = v
}

func (o DataSourceSelectCommandParameterVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSourceSelectCommandParameterVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	toSerialize["name"] = o.Name
	toSerialize["dataType"] = o.DataType
	if o.DefaultValue.IsSet() {
		toSerialize["defaultValue"] = o.DefaultValue.Get()
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *DataSourceSelectCommandParameterVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"dataType",
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataSourceSelectCommandParameterVM := _DataSourceSelectCommandParameterVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataSourceSelectCommandParameterVM)

	if err != nil {
		return err
	}

	*o = DataSourceSelectCommandParameterVM(varDataSourceSelectCommandParameterVM)

	return err
}

type NullableDataSourceSelectCommandParameterVM struct {
	value *DataSourceSelectCommandParameterVM
	isSet bool
}

func (v NullableDataSourceSelectCommandParameterVM) Get() *DataSourceSelectCommandParameterVM {
	return v.value
}

func (v *NullableDataSourceSelectCommandParameterVM) Set(val *DataSourceSelectCommandParameterVM) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceSelectCommandParameterVM) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceSelectCommandParameterVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceSelectCommandParameterVM(val *DataSourceSelectCommandParameterVM) *NullableDataSourceSelectCommandParameterVM {
	return &NullableDataSourceSelectCommandParameterVM{value: val, isSet: true}
}

func (v NullableDataSourceSelectCommandParameterVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceSelectCommandParameterVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


