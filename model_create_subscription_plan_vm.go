/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateSubscriptionPlanVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSubscriptionPlanVM{}

// CreateSubscriptionPlanVM struct for CreateSubscriptionPlanVM
type CreateSubscriptionPlanVM struct {
	CloudBaseVM
	IsActive NullableBool `json:"isActive,omitempty"`
	DisplayName NullableString `json:"displayName,omitempty"`
	TimePeriodType NullableTimePeriodType `json:"timePeriodType,omitempty"`
	TimePeriod NullableInt32 `json:"timePeriod,omitempty"`
	TemplatesSpaceLimit NullableInt64 `json:"templatesSpaceLimit,omitempty"`
	ReportsSpaceLimit NullableInt64 `json:"reportsSpaceLimit,omitempty"`
	ExportsSpaceLimit NullableInt64 `json:"exportsSpaceLimit,omitempty"`
	FileUploadSizeLimit NullableInt64 `json:"fileUploadSizeLimit,omitempty"`
	DataSourceLimit NullableInt32 `json:"dataSourceLimit,omitempty"`
	MaxUsersCount NullableInt32 `json:"maxUsersCount,omitempty"`
	GroupLimit NullableInt32 `json:"groupLimit,omitempty"`
	OnlineDesigner NullableBool `json:"onlineDesigner,omitempty"`
	IsDemo NullableBool `json:"isDemo,omitempty"`
	UrlToBuy NullableString `json:"urlToBuy,omitempty"`
	UnlimitedPage NullableBool `json:"unlimitedPage,omitempty"`
	PageLimit NullableInt32 `json:"pageLimit,omitempty"`
	ReadonlyTimeLimitType NullableTimePeriodType `json:"readonlyTimeLimitType,omitempty"`
	ReadonlyTimeLimit NullableInt32 `json:"readonlyTimeLimit,omitempty"`
	Tasks *TaskSettingsVM `json:"tasks,omitempty"`
	T string `json:"$t"`
}

type _CreateSubscriptionPlanVM CreateSubscriptionPlanVM

// NewCreateSubscriptionPlanVM instantiates a new CreateSubscriptionPlanVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSubscriptionPlanVM(t string) *CreateSubscriptionPlanVM {
	this := CreateSubscriptionPlanVM{}
	this.T = t
	return &this
}

// NewCreateSubscriptionPlanVMWithDefaults instantiates a new CreateSubscriptionPlanVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSubscriptionPlanVMWithDefaults() *CreateSubscriptionPlanVM {
	this := CreateSubscriptionPlanVM{}
	return &this
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive.Get()) {
		var ret bool
		return ret
	}
	return *o.IsActive.Get()
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsActive.Get(), o.IsActive.IsSet()
}

// HasIsActive returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasIsActive() bool {
	if o != nil && o.IsActive.IsSet() {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given NullableBool and assigns it to the IsActive field.
func (o *CreateSubscriptionPlanVM) SetIsActive(v bool) {
	o.IsActive.Set(&v)
}
// SetIsActiveNil sets the value for IsActive to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetIsActiveNil() {
	o.IsActive.Set(nil)
}

// UnsetIsActive ensures that no value is present for IsActive, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetIsActive() {
	o.IsActive.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *CreateSubscriptionPlanVM) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetTimePeriodType returns the TimePeriodType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetTimePeriodType() TimePeriodType {
	if o == nil || IsNil(o.TimePeriodType.Get()) {
		var ret TimePeriodType
		return ret
	}
	return *o.TimePeriodType.Get()
}

// GetTimePeriodTypeOk returns a tuple with the TimePeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetTimePeriodTypeOk() (*TimePeriodType, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimePeriodType.Get(), o.TimePeriodType.IsSet()
}

// HasTimePeriodType returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasTimePeriodType() bool {
	if o != nil && o.TimePeriodType.IsSet() {
		return true
	}

	return false
}

// SetTimePeriodType gets a reference to the given NullableTimePeriodType and assigns it to the TimePeriodType field.
func (o *CreateSubscriptionPlanVM) SetTimePeriodType(v TimePeriodType) {
	o.TimePeriodType.Set(&v)
}
// SetTimePeriodTypeNil sets the value for TimePeriodType to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetTimePeriodTypeNil() {
	o.TimePeriodType.Set(nil)
}

// UnsetTimePeriodType ensures that no value is present for TimePeriodType, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetTimePeriodType() {
	o.TimePeriodType.Unset()
}

// GetTimePeriod returns the TimePeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetTimePeriod() int32 {
	if o == nil || IsNil(o.TimePeriod.Get()) {
		var ret int32
		return ret
	}
	return *o.TimePeriod.Get()
}

// GetTimePeriodOk returns a tuple with the TimePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetTimePeriodOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimePeriod.Get(), o.TimePeriod.IsSet()
}

// HasTimePeriod returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasTimePeriod() bool {
	if o != nil && o.TimePeriod.IsSet() {
		return true
	}

	return false
}

// SetTimePeriod gets a reference to the given NullableInt32 and assigns it to the TimePeriod field.
func (o *CreateSubscriptionPlanVM) SetTimePeriod(v int32) {
	o.TimePeriod.Set(&v)
}
// SetTimePeriodNil sets the value for TimePeriod to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetTimePeriodNil() {
	o.TimePeriod.Set(nil)
}

// UnsetTimePeriod ensures that no value is present for TimePeriod, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetTimePeriod() {
	o.TimePeriod.Unset()
}

// GetTemplatesSpaceLimit returns the TemplatesSpaceLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetTemplatesSpaceLimit() int64 {
	if o == nil || IsNil(o.TemplatesSpaceLimit.Get()) {
		var ret int64
		return ret
	}
	return *o.TemplatesSpaceLimit.Get()
}

// GetTemplatesSpaceLimitOk returns a tuple with the TemplatesSpaceLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetTemplatesSpaceLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplatesSpaceLimit.Get(), o.TemplatesSpaceLimit.IsSet()
}

// HasTemplatesSpaceLimit returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasTemplatesSpaceLimit() bool {
	if o != nil && o.TemplatesSpaceLimit.IsSet() {
		return true
	}

	return false
}

// SetTemplatesSpaceLimit gets a reference to the given NullableInt64 and assigns it to the TemplatesSpaceLimit field.
func (o *CreateSubscriptionPlanVM) SetTemplatesSpaceLimit(v int64) {
	o.TemplatesSpaceLimit.Set(&v)
}
// SetTemplatesSpaceLimitNil sets the value for TemplatesSpaceLimit to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetTemplatesSpaceLimitNil() {
	o.TemplatesSpaceLimit.Set(nil)
}

// UnsetTemplatesSpaceLimit ensures that no value is present for TemplatesSpaceLimit, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetTemplatesSpaceLimit() {
	o.TemplatesSpaceLimit.Unset()
}

// GetReportsSpaceLimit returns the ReportsSpaceLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetReportsSpaceLimit() int64 {
	if o == nil || IsNil(o.ReportsSpaceLimit.Get()) {
		var ret int64
		return ret
	}
	return *o.ReportsSpaceLimit.Get()
}

// GetReportsSpaceLimitOk returns a tuple with the ReportsSpaceLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetReportsSpaceLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReportsSpaceLimit.Get(), o.ReportsSpaceLimit.IsSet()
}

// HasReportsSpaceLimit returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasReportsSpaceLimit() bool {
	if o != nil && o.ReportsSpaceLimit.IsSet() {
		return true
	}

	return false
}

// SetReportsSpaceLimit gets a reference to the given NullableInt64 and assigns it to the ReportsSpaceLimit field.
func (o *CreateSubscriptionPlanVM) SetReportsSpaceLimit(v int64) {
	o.ReportsSpaceLimit.Set(&v)
}
// SetReportsSpaceLimitNil sets the value for ReportsSpaceLimit to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetReportsSpaceLimitNil() {
	o.ReportsSpaceLimit.Set(nil)
}

// UnsetReportsSpaceLimit ensures that no value is present for ReportsSpaceLimit, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetReportsSpaceLimit() {
	o.ReportsSpaceLimit.Unset()
}

// GetExportsSpaceLimit returns the ExportsSpaceLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetExportsSpaceLimit() int64 {
	if o == nil || IsNil(o.ExportsSpaceLimit.Get()) {
		var ret int64
		return ret
	}
	return *o.ExportsSpaceLimit.Get()
}

// GetExportsSpaceLimitOk returns a tuple with the ExportsSpaceLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetExportsSpaceLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExportsSpaceLimit.Get(), o.ExportsSpaceLimit.IsSet()
}

// HasExportsSpaceLimit returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasExportsSpaceLimit() bool {
	if o != nil && o.ExportsSpaceLimit.IsSet() {
		return true
	}

	return false
}

// SetExportsSpaceLimit gets a reference to the given NullableInt64 and assigns it to the ExportsSpaceLimit field.
func (o *CreateSubscriptionPlanVM) SetExportsSpaceLimit(v int64) {
	o.ExportsSpaceLimit.Set(&v)
}
// SetExportsSpaceLimitNil sets the value for ExportsSpaceLimit to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetExportsSpaceLimitNil() {
	o.ExportsSpaceLimit.Set(nil)
}

// UnsetExportsSpaceLimit ensures that no value is present for ExportsSpaceLimit, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetExportsSpaceLimit() {
	o.ExportsSpaceLimit.Unset()
}

// GetFileUploadSizeLimit returns the FileUploadSizeLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetFileUploadSizeLimit() int64 {
	if o == nil || IsNil(o.FileUploadSizeLimit.Get()) {
		var ret int64
		return ret
	}
	return *o.FileUploadSizeLimit.Get()
}

// GetFileUploadSizeLimitOk returns a tuple with the FileUploadSizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetFileUploadSizeLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileUploadSizeLimit.Get(), o.FileUploadSizeLimit.IsSet()
}

// HasFileUploadSizeLimit returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasFileUploadSizeLimit() bool {
	if o != nil && o.FileUploadSizeLimit.IsSet() {
		return true
	}

	return false
}

// SetFileUploadSizeLimit gets a reference to the given NullableInt64 and assigns it to the FileUploadSizeLimit field.
func (o *CreateSubscriptionPlanVM) SetFileUploadSizeLimit(v int64) {
	o.FileUploadSizeLimit.Set(&v)
}
// SetFileUploadSizeLimitNil sets the value for FileUploadSizeLimit to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetFileUploadSizeLimitNil() {
	o.FileUploadSizeLimit.Set(nil)
}

// UnsetFileUploadSizeLimit ensures that no value is present for FileUploadSizeLimit, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetFileUploadSizeLimit() {
	o.FileUploadSizeLimit.Unset()
}

// GetDataSourceLimit returns the DataSourceLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetDataSourceLimit() int32 {
	if o == nil || IsNil(o.DataSourceLimit.Get()) {
		var ret int32
		return ret
	}
	return *o.DataSourceLimit.Get()
}

// GetDataSourceLimitOk returns a tuple with the DataSourceLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetDataSourceLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataSourceLimit.Get(), o.DataSourceLimit.IsSet()
}

// HasDataSourceLimit returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasDataSourceLimit() bool {
	if o != nil && o.DataSourceLimit.IsSet() {
		return true
	}

	return false
}

// SetDataSourceLimit gets a reference to the given NullableInt32 and assigns it to the DataSourceLimit field.
func (o *CreateSubscriptionPlanVM) SetDataSourceLimit(v int32) {
	o.DataSourceLimit.Set(&v)
}
// SetDataSourceLimitNil sets the value for DataSourceLimit to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetDataSourceLimitNil() {
	o.DataSourceLimit.Set(nil)
}

// UnsetDataSourceLimit ensures that no value is present for DataSourceLimit, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetDataSourceLimit() {
	o.DataSourceLimit.Unset()
}

// GetMaxUsersCount returns the MaxUsersCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetMaxUsersCount() int32 {
	if o == nil || IsNil(o.MaxUsersCount.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxUsersCount.Get()
}

// GetMaxUsersCountOk returns a tuple with the MaxUsersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetMaxUsersCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxUsersCount.Get(), o.MaxUsersCount.IsSet()
}

// HasMaxUsersCount returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasMaxUsersCount() bool {
	if o != nil && o.MaxUsersCount.IsSet() {
		return true
	}

	return false
}

// SetMaxUsersCount gets a reference to the given NullableInt32 and assigns it to the MaxUsersCount field.
func (o *CreateSubscriptionPlanVM) SetMaxUsersCount(v int32) {
	o.MaxUsersCount.Set(&v)
}
// SetMaxUsersCountNil sets the value for MaxUsersCount to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetMaxUsersCountNil() {
	o.MaxUsersCount.Set(nil)
}

// UnsetMaxUsersCount ensures that no value is present for MaxUsersCount, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetMaxUsersCount() {
	o.MaxUsersCount.Unset()
}

// GetGroupLimit returns the GroupLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetGroupLimit() int32 {
	if o == nil || IsNil(o.GroupLimit.Get()) {
		var ret int32
		return ret
	}
	return *o.GroupLimit.Get()
}

// GetGroupLimitOk returns a tuple with the GroupLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetGroupLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupLimit.Get(), o.GroupLimit.IsSet()
}

// HasGroupLimit returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasGroupLimit() bool {
	if o != nil && o.GroupLimit.IsSet() {
		return true
	}

	return false
}

// SetGroupLimit gets a reference to the given NullableInt32 and assigns it to the GroupLimit field.
func (o *CreateSubscriptionPlanVM) SetGroupLimit(v int32) {
	o.GroupLimit.Set(&v)
}
// SetGroupLimitNil sets the value for GroupLimit to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetGroupLimitNil() {
	o.GroupLimit.Set(nil)
}

// UnsetGroupLimit ensures that no value is present for GroupLimit, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetGroupLimit() {
	o.GroupLimit.Unset()
}

// GetOnlineDesigner returns the OnlineDesigner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetOnlineDesigner() bool {
	if o == nil || IsNil(o.OnlineDesigner.Get()) {
		var ret bool
		return ret
	}
	return *o.OnlineDesigner.Get()
}

// GetOnlineDesignerOk returns a tuple with the OnlineDesigner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetOnlineDesignerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OnlineDesigner.Get(), o.OnlineDesigner.IsSet()
}

// HasOnlineDesigner returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasOnlineDesigner() bool {
	if o != nil && o.OnlineDesigner.IsSet() {
		return true
	}

	return false
}

// SetOnlineDesigner gets a reference to the given NullableBool and assigns it to the OnlineDesigner field.
func (o *CreateSubscriptionPlanVM) SetOnlineDesigner(v bool) {
	o.OnlineDesigner.Set(&v)
}
// SetOnlineDesignerNil sets the value for OnlineDesigner to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetOnlineDesignerNil() {
	o.OnlineDesigner.Set(nil)
}

// UnsetOnlineDesigner ensures that no value is present for OnlineDesigner, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetOnlineDesigner() {
	o.OnlineDesigner.Unset()
}

// GetIsDemo returns the IsDemo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetIsDemo() bool {
	if o == nil || IsNil(o.IsDemo.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDemo.Get()
}

// GetIsDemoOk returns a tuple with the IsDemo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetIsDemoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDemo.Get(), o.IsDemo.IsSet()
}

// HasIsDemo returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasIsDemo() bool {
	if o != nil && o.IsDemo.IsSet() {
		return true
	}

	return false
}

// SetIsDemo gets a reference to the given NullableBool and assigns it to the IsDemo field.
func (o *CreateSubscriptionPlanVM) SetIsDemo(v bool) {
	o.IsDemo.Set(&v)
}
// SetIsDemoNil sets the value for IsDemo to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetIsDemoNil() {
	o.IsDemo.Set(nil)
}

// UnsetIsDemo ensures that no value is present for IsDemo, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetIsDemo() {
	o.IsDemo.Unset()
}

// GetUrlToBuy returns the UrlToBuy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetUrlToBuy() string {
	if o == nil || IsNil(o.UrlToBuy.Get()) {
		var ret string
		return ret
	}
	return *o.UrlToBuy.Get()
}

// GetUrlToBuyOk returns a tuple with the UrlToBuy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetUrlToBuyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UrlToBuy.Get(), o.UrlToBuy.IsSet()
}

// HasUrlToBuy returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasUrlToBuy() bool {
	if o != nil && o.UrlToBuy.IsSet() {
		return true
	}

	return false
}

// SetUrlToBuy gets a reference to the given NullableString and assigns it to the UrlToBuy field.
func (o *CreateSubscriptionPlanVM) SetUrlToBuy(v string) {
	o.UrlToBuy.Set(&v)
}
// SetUrlToBuyNil sets the value for UrlToBuy to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetUrlToBuyNil() {
	o.UrlToBuy.Set(nil)
}

// UnsetUrlToBuy ensures that no value is present for UrlToBuy, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetUrlToBuy() {
	o.UrlToBuy.Unset()
}

// GetUnlimitedPage returns the UnlimitedPage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetUnlimitedPage() bool {
	if o == nil || IsNil(o.UnlimitedPage.Get()) {
		var ret bool
		return ret
	}
	return *o.UnlimitedPage.Get()
}

// GetUnlimitedPageOk returns a tuple with the UnlimitedPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetUnlimitedPageOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnlimitedPage.Get(), o.UnlimitedPage.IsSet()
}

// HasUnlimitedPage returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasUnlimitedPage() bool {
	if o != nil && o.UnlimitedPage.IsSet() {
		return true
	}

	return false
}

// SetUnlimitedPage gets a reference to the given NullableBool and assigns it to the UnlimitedPage field.
func (o *CreateSubscriptionPlanVM) SetUnlimitedPage(v bool) {
	o.UnlimitedPage.Set(&v)
}
// SetUnlimitedPageNil sets the value for UnlimitedPage to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetUnlimitedPageNil() {
	o.UnlimitedPage.Set(nil)
}

// UnsetUnlimitedPage ensures that no value is present for UnlimitedPage, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetUnlimitedPage() {
	o.UnlimitedPage.Unset()
}

// GetPageLimit returns the PageLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetPageLimit() int32 {
	if o == nil || IsNil(o.PageLimit.Get()) {
		var ret int32
		return ret
	}
	return *o.PageLimit.Get()
}

// GetPageLimitOk returns a tuple with the PageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetPageLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PageLimit.Get(), o.PageLimit.IsSet()
}

// HasPageLimit returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasPageLimit() bool {
	if o != nil && o.PageLimit.IsSet() {
		return true
	}

	return false
}

// SetPageLimit gets a reference to the given NullableInt32 and assigns it to the PageLimit field.
func (o *CreateSubscriptionPlanVM) SetPageLimit(v int32) {
	o.PageLimit.Set(&v)
}
// SetPageLimitNil sets the value for PageLimit to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetPageLimitNil() {
	o.PageLimit.Set(nil)
}

// UnsetPageLimit ensures that no value is present for PageLimit, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetPageLimit() {
	o.PageLimit.Unset()
}

// GetReadonlyTimeLimitType returns the ReadonlyTimeLimitType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetReadonlyTimeLimitType() TimePeriodType {
	if o == nil || IsNil(o.ReadonlyTimeLimitType.Get()) {
		var ret TimePeriodType
		return ret
	}
	return *o.ReadonlyTimeLimitType.Get()
}

// GetReadonlyTimeLimitTypeOk returns a tuple with the ReadonlyTimeLimitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetReadonlyTimeLimitTypeOk() (*TimePeriodType, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReadonlyTimeLimitType.Get(), o.ReadonlyTimeLimitType.IsSet()
}

// HasReadonlyTimeLimitType returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasReadonlyTimeLimitType() bool {
	if o != nil && o.ReadonlyTimeLimitType.IsSet() {
		return true
	}

	return false
}

// SetReadonlyTimeLimitType gets a reference to the given NullableTimePeriodType and assigns it to the ReadonlyTimeLimitType field.
func (o *CreateSubscriptionPlanVM) SetReadonlyTimeLimitType(v TimePeriodType) {
	o.ReadonlyTimeLimitType.Set(&v)
}
// SetReadonlyTimeLimitTypeNil sets the value for ReadonlyTimeLimitType to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetReadonlyTimeLimitTypeNil() {
	o.ReadonlyTimeLimitType.Set(nil)
}

// UnsetReadonlyTimeLimitType ensures that no value is present for ReadonlyTimeLimitType, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetReadonlyTimeLimitType() {
	o.ReadonlyTimeLimitType.Unset()
}

// GetReadonlyTimeLimit returns the ReadonlyTimeLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSubscriptionPlanVM) GetReadonlyTimeLimit() int32 {
	if o == nil || IsNil(o.ReadonlyTimeLimit.Get()) {
		var ret int32
		return ret
	}
	return *o.ReadonlyTimeLimit.Get()
}

// GetReadonlyTimeLimitOk returns a tuple with the ReadonlyTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSubscriptionPlanVM) GetReadonlyTimeLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReadonlyTimeLimit.Get(), o.ReadonlyTimeLimit.IsSet()
}

// HasReadonlyTimeLimit returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasReadonlyTimeLimit() bool {
	if o != nil && o.ReadonlyTimeLimit.IsSet() {
		return true
	}

	return false
}

// SetReadonlyTimeLimit gets a reference to the given NullableInt32 and assigns it to the ReadonlyTimeLimit field.
func (o *CreateSubscriptionPlanVM) SetReadonlyTimeLimit(v int32) {
	o.ReadonlyTimeLimit.Set(&v)
}
// SetReadonlyTimeLimitNil sets the value for ReadonlyTimeLimit to be an explicit nil
func (o *CreateSubscriptionPlanVM) SetReadonlyTimeLimitNil() {
	o.ReadonlyTimeLimit.Set(nil)
}

// UnsetReadonlyTimeLimit ensures that no value is present for ReadonlyTimeLimit, not even an explicit nil
func (o *CreateSubscriptionPlanVM) UnsetReadonlyTimeLimit() {
	o.ReadonlyTimeLimit.Unset()
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *CreateSubscriptionPlanVM) GetTasks() TaskSettingsVM {
	if o == nil || IsNil(o.Tasks) {
		var ret TaskSettingsVM
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubscriptionPlanVM) GetTasksOk() (*TaskSettingsVM, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *CreateSubscriptionPlanVM) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given TaskSettingsVM and assigns it to the Tasks field.
func (o *CreateSubscriptionPlanVM) SetTasks(v TaskSettingsVM) {
	o.Tasks = &v
}

// GetT returns the T field value
func (o *CreateSubscriptionPlanVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *CreateSubscriptionPlanVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *CreateSubscriptionPlanVM) SetT(v string) {
	o.T = v
}

func (o CreateSubscriptionPlanVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSubscriptionPlanVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	if o.IsActive.IsSet() {
		toSerialize["isActive"] = o.IsActive.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.TimePeriodType.IsSet() {
		toSerialize["timePeriodType"] = o.TimePeriodType.Get()
	}
	if o.TimePeriod.IsSet() {
		toSerialize["timePeriod"] = o.TimePeriod.Get()
	}
	if o.TemplatesSpaceLimit.IsSet() {
		toSerialize["templatesSpaceLimit"] = o.TemplatesSpaceLimit.Get()
	}
	if o.ReportsSpaceLimit.IsSet() {
		toSerialize["reportsSpaceLimit"] = o.ReportsSpaceLimit.Get()
	}
	if o.ExportsSpaceLimit.IsSet() {
		toSerialize["exportsSpaceLimit"] = o.ExportsSpaceLimit.Get()
	}
	if o.FileUploadSizeLimit.IsSet() {
		toSerialize["fileUploadSizeLimit"] = o.FileUploadSizeLimit.Get()
	}
	if o.DataSourceLimit.IsSet() {
		toSerialize["dataSourceLimit"] = o.DataSourceLimit.Get()
	}
	if o.MaxUsersCount.IsSet() {
		toSerialize["maxUsersCount"] = o.MaxUsersCount.Get()
	}
	if o.GroupLimit.IsSet() {
		toSerialize["groupLimit"] = o.GroupLimit.Get()
	}
	if o.OnlineDesigner.IsSet() {
		toSerialize["onlineDesigner"] = o.OnlineDesigner.Get()
	}
	if o.IsDemo.IsSet() {
		toSerialize["isDemo"] = o.IsDemo.Get()
	}
	if o.UrlToBuy.IsSet() {
		toSerialize["urlToBuy"] = o.UrlToBuy.Get()
	}
	if o.UnlimitedPage.IsSet() {
		toSerialize["unlimitedPage"] = o.UnlimitedPage.Get()
	}
	if o.PageLimit.IsSet() {
		toSerialize["pageLimit"] = o.PageLimit.Get()
	}
	if o.ReadonlyTimeLimitType.IsSet() {
		toSerialize["readonlyTimeLimitType"] = o.ReadonlyTimeLimitType.Get()
	}
	if o.ReadonlyTimeLimit.IsSet() {
		toSerialize["readonlyTimeLimit"] = o.ReadonlyTimeLimit.Get()
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *CreateSubscriptionPlanVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSubscriptionPlanVM := _CreateSubscriptionPlanVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateSubscriptionPlanVM)

	if err != nil {
		return err
	}

	*o = CreateSubscriptionPlanVM(varCreateSubscriptionPlanVM)

	return err
}

type NullableCreateSubscriptionPlanVM struct {
	value *CreateSubscriptionPlanVM
	isSet bool
}

func (v NullableCreateSubscriptionPlanVM) Get() *CreateSubscriptionPlanVM {
	return v.value
}

func (v *NullableCreateSubscriptionPlanVM) Set(val *CreateSubscriptionPlanVM) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubscriptionPlanVM) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubscriptionPlanVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubscriptionPlanVM(val *CreateSubscriptionPlanVM) *NullableCreateSubscriptionPlanVM {
	return &NullableCreateSubscriptionPlanVM{value: val, isSet: true}
}

func (v NullableCreateSubscriptionPlanVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubscriptionPlanVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


