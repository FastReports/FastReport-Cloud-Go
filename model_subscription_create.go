/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// SubscriptionCreate the model 'SubscriptionCreate'
type SubscriptionCreate int32

// List of SubscriptionCreate
const (
	_0 SubscriptionCreate = 0
	_1 SubscriptionCreate = 1
	_2 SubscriptionCreate = 2
	_4 SubscriptionCreate = 4
	_8 SubscriptionCreate = 8
	_16 SubscriptionCreate = 16
	_32 SubscriptionCreate = 32
	_64 SubscriptionCreate = 64
	_MINUS_1 SubscriptionCreate = -1
)

// All allowed values of SubscriptionCreate enum
var AllowedSubscriptionCreateEnumValues = []SubscriptionCreate{
	0,
	1,
	2,
	4,
	8,
	16,
	32,
	64,
	-1,
}

func (v *SubscriptionCreate) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionCreate(value)
	for _, existing := range AllowedSubscriptionCreateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionCreate", value)
}

// NewSubscriptionCreateFromValue returns a pointer to a valid SubscriptionCreate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionCreateFromValue(v int32) (*SubscriptionCreate, error) {
	ev := SubscriptionCreate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionCreate: valid values are %v", v, AllowedSubscriptionCreateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionCreate) IsValid() bool {
	for _, existing := range AllowedSubscriptionCreateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionCreate value
func (v SubscriptionCreate) Ptr() *SubscriptionCreate {
	return &v
}

type NullableSubscriptionCreate struct {
	value *SubscriptionCreate
	isSet bool
}

func (v NullableSubscriptionCreate) Get() *SubscriptionCreate {
	return v.value
}

func (v *NullableSubscriptionCreate) Set(val *SubscriptionCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionCreate(val *SubscriptionCreate) *NullableSubscriptionCreate {
	return &NullableSubscriptionCreate{value: val, isSet: true}
}

func (v NullableSubscriptionCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

