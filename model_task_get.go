/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// TaskGet the model 'TaskGet'
type TaskGet int32

// List of TaskGet
const (
	_0 TaskGet = 0
	_1 TaskGet = 1
	_2 TaskGet = 2
	_4 TaskGet = 4
	_MINUS_1 TaskGet = -1
)

// All allowed values of TaskGet enum
var AllowedTaskGetEnumValues = []TaskGet{
	0,
	1,
	2,
	4,
	-1,
}

func (v *TaskGet) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaskGet(value)
	for _, existing := range AllowedTaskGetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaskGet", value)
}

// NewTaskGetFromValue returns a pointer to a valid TaskGet
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaskGetFromValue(v int32) (*TaskGet, error) {
	ev := TaskGet(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaskGet: valid values are %v", v, AllowedTaskGetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaskGet) IsValid() bool {
	for _, existing := range AllowedTaskGetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaskGet value
func (v TaskGet) Ptr() *TaskGet {
	return &v
}

type NullableTaskGet struct {
	value *TaskGet
	isSet bool
}

func (v NullableTaskGet) Get() *TaskGet {
	return v.value
}

func (v *NullableTaskGet) Set(val *TaskGet) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskGet) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskGet(val *TaskGet) *NullableTaskGet {
	return &NullableTaskGet{value: val, isSet: true}
}

func (v NullableTaskGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

