/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// ProblemLevel the model 'ProblemLevel'
type ProblemLevel string

// List of ProblemLevel
const (
	NONE ProblemLevel = "None"
	INFORMATION ProblemLevel = "Information"
	WARNING ProblemLevel = "Warning"
	CRITICAL ProblemLevel = "Critical"
)

// All allowed values of ProblemLevel enum
var AllowedProblemLevelEnumValues = []ProblemLevel{
	"None",
	"Information",
	"Warning",
	"Critical",
}

func (v *ProblemLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProblemLevel(value)
	for _, existing := range AllowedProblemLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProblemLevel", value)
}

// NewProblemLevelFromValue returns a pointer to a valid ProblemLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProblemLevelFromValue(v string) (*ProblemLevel, error) {
	ev := ProblemLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProblemLevel: valid values are %v", v, AllowedProblemLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProblemLevel) IsValid() bool {
	for _, existing := range AllowedProblemLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProblemLevel value
func (v ProblemLevel) Ptr() *ProblemLevel {
	return &v
}

type NullableProblemLevel struct {
	value *ProblemLevel
	isSet bool
}

func (v NullableProblemLevel) Get() *ProblemLevel {
	return v.value
}

func (v *NullableProblemLevel) Set(val *ProblemLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemLevel(val *ProblemLevel) *NullableProblemLevel {
	return &NullableProblemLevel{value: val, isSet: true}
}

func (v NullableProblemLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

