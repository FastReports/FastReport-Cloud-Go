/*
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// FileExecute the model 'FileExecute'
type FileExecute int32

// List of FileExecute
const (
	_0 FileExecute = 0
	_1 FileExecute = 1
	_2 FileExecute = 2
	_4 FileExecute = 4
	_MINUS_1 FileExecute = -1
)

var allowedFileExecuteEnumValues = []FileExecute{
	0,
	1,
	2,
	4,
	-1,
}

func (v *FileExecute) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileExecute(value)
	for _, existing := range allowedFileExecuteEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileExecute", value)
}

// NewFileExecuteFromValue returns a pointer to a valid FileExecute
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileExecuteFromValue(v int32) (*FileExecute, error) {
	ev := FileExecute(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileExecute: valid values are %v", v, allowedFileExecuteEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileExecute) IsValid() bool {
	for _, existing := range allowedFileExecuteEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileExecute value
func (v FileExecute) Ptr() *FileExecute {
	return &v
}

type NullableFileExecute struct {
	value *FileExecute
	isSet bool
}

func (v NullableFileExecute) Get() *FileExecute {
	return v.value
}

func (v *NullableFileExecute) Set(val *FileExecute) {
	v.value = val
	v.isSet = true
}

func (v NullableFileExecute) IsSet() bool {
	return v.isSet
}

func (v *NullableFileExecute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileExecute(val *FileExecute) *NullableFileExecute {
	return &NullableFileExecute{value: val, isSet: true}
}

func (v NullableFileExecute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileExecute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

