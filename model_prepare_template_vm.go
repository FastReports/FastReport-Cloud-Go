/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PrepareTemplateVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrepareTemplateVM{}

// PrepareTemplateVM struct for PrepareTemplateVM
type PrepareTemplateVM struct {
	CloudBaseVM
	Name NullableString `json:"name,omitempty"`
	Locale NullableString `json:"locale,omitempty"`
	FolderId NullableString `json:"folderId,omitempty"`
	PagesCount NullableInt32 `json:"pagesCount,omitempty"`
	ReportParameters map[string]string `json:"reportParameters,omitempty"`
	T string `json:"$t"`
}

type _PrepareTemplateVM PrepareTemplateVM

// NewPrepareTemplateVM instantiates a new PrepareTemplateVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrepareTemplateVM(t string) *PrepareTemplateVM {
	this := PrepareTemplateVM{}
	this.T = t
	return &this
}

// NewPrepareTemplateVMWithDefaults instantiates a new PrepareTemplateVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrepareTemplateVMWithDefaults() *PrepareTemplateVM {
	this := PrepareTemplateVM{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrepareTemplateVM) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrepareTemplateVM) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *PrepareTemplateVM) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *PrepareTemplateVM) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *PrepareTemplateVM) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *PrepareTemplateVM) UnsetName() {
	o.Name.Unset()
}

// GetLocale returns the Locale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrepareTemplateVM) GetLocale() string {
	if o == nil || IsNil(o.Locale.Get()) {
		var ret string
		return ret
	}
	return *o.Locale.Get()
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrepareTemplateVM) GetLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locale.Get(), o.Locale.IsSet()
}

// HasLocale returns a boolean if a field has been set.
func (o *PrepareTemplateVM) HasLocale() bool {
	if o != nil && o.Locale.IsSet() {
		return true
	}

	return false
}

// SetLocale gets a reference to the given NullableString and assigns it to the Locale field.
func (o *PrepareTemplateVM) SetLocale(v string) {
	o.Locale.Set(&v)
}
// SetLocaleNil sets the value for Locale to be an explicit nil
func (o *PrepareTemplateVM) SetLocaleNil() {
	o.Locale.Set(nil)
}

// UnsetLocale ensures that no value is present for Locale, not even an explicit nil
func (o *PrepareTemplateVM) UnsetLocale() {
	o.Locale.Unset()
}

// GetFolderId returns the FolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrepareTemplateVM) GetFolderId() string {
	if o == nil || IsNil(o.FolderId.Get()) {
		var ret string
		return ret
	}
	return *o.FolderId.Get()
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrepareTemplateVM) GetFolderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FolderId.Get(), o.FolderId.IsSet()
}

// HasFolderId returns a boolean if a field has been set.
func (o *PrepareTemplateVM) HasFolderId() bool {
	if o != nil && o.FolderId.IsSet() {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given NullableString and assigns it to the FolderId field.
func (o *PrepareTemplateVM) SetFolderId(v string) {
	o.FolderId.Set(&v)
}
// SetFolderIdNil sets the value for FolderId to be an explicit nil
func (o *PrepareTemplateVM) SetFolderIdNil() {
	o.FolderId.Set(nil)
}

// UnsetFolderId ensures that no value is present for FolderId, not even an explicit nil
func (o *PrepareTemplateVM) UnsetFolderId() {
	o.FolderId.Unset()
}

// GetPagesCount returns the PagesCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrepareTemplateVM) GetPagesCount() int32 {
	if o == nil || IsNil(o.PagesCount.Get()) {
		var ret int32
		return ret
	}
	return *o.PagesCount.Get()
}

// GetPagesCountOk returns a tuple with the PagesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrepareTemplateVM) GetPagesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PagesCount.Get(), o.PagesCount.IsSet()
}

// HasPagesCount returns a boolean if a field has been set.
func (o *PrepareTemplateVM) HasPagesCount() bool {
	if o != nil && o.PagesCount.IsSet() {
		return true
	}

	return false
}

// SetPagesCount gets a reference to the given NullableInt32 and assigns it to the PagesCount field.
func (o *PrepareTemplateVM) SetPagesCount(v int32) {
	o.PagesCount.Set(&v)
}
// SetPagesCountNil sets the value for PagesCount to be an explicit nil
func (o *PrepareTemplateVM) SetPagesCountNil() {
	o.PagesCount.Set(nil)
}

// UnsetPagesCount ensures that no value is present for PagesCount, not even an explicit nil
func (o *PrepareTemplateVM) UnsetPagesCount() {
	o.PagesCount.Unset()
}

// GetReportParameters returns the ReportParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrepareTemplateVM) GetReportParameters() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.ReportParameters
}

// GetReportParametersOk returns a tuple with the ReportParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrepareTemplateVM) GetReportParametersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ReportParameters) {
		return nil, false
	}
	return &o.ReportParameters, true
}

// HasReportParameters returns a boolean if a field has been set.
func (o *PrepareTemplateVM) HasReportParameters() bool {
	if o != nil && IsNil(o.ReportParameters) {
		return true
	}

	return false
}

// SetReportParameters gets a reference to the given map[string]string and assigns it to the ReportParameters field.
func (o *PrepareTemplateVM) SetReportParameters(v map[string]string) {
	o.ReportParameters = v
}

// GetT returns the T field value
func (o *PrepareTemplateVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *PrepareTemplateVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *PrepareTemplateVM) SetT(v string) {
	o.T = v
}

func (o PrepareTemplateVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrepareTemplateVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Locale.IsSet() {
		toSerialize["locale"] = o.Locale.Get()
	}
	if o.FolderId.IsSet() {
		toSerialize["folderId"] = o.FolderId.Get()
	}
	if o.PagesCount.IsSet() {
		toSerialize["pagesCount"] = o.PagesCount.Get()
	}
	if o.ReportParameters != nil {
		toSerialize["reportParameters"] = o.ReportParameters
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *PrepareTemplateVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrepareTemplateVM := _PrepareTemplateVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrepareTemplateVM)

	if err != nil {
		return err
	}

	*o = PrepareTemplateVM(varPrepareTemplateVM)

	return err
}

type NullablePrepareTemplateVM struct {
	value *PrepareTemplateVM
	isSet bool
}

func (v NullablePrepareTemplateVM) Get() *PrepareTemplateVM {
	return v.value
}

func (v *NullablePrepareTemplateVM) Set(val *PrepareTemplateVM) {
	v.value = val
	v.isSet = true
}

func (v NullablePrepareTemplateVM) IsSet() bool {
	return v.isSet
}

func (v *NullablePrepareTemplateVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrepareTemplateVM(val *PrepareTemplateVM) *NullablePrepareTemplateVM {
	return &NullablePrepareTemplateVM{value: val, isSet: true}
}

func (v NullablePrepareTemplateVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrepareTemplateVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


