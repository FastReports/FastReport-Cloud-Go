/*
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package FastReport.Cloud.SDK

import (
	"encoding/json"
)

// DataSourcesVM struct for DataSourcesVM
type DataSourcesVM struct {
	DataSources *[]DataSourceVM `json:"dataSources,omitempty"`
	Count *int64 `json:"count,omitempty"`
	Skip *int32 `json:"skip,omitempty"`
	Take *int32 `json:"take,omitempty"`
}

// NewDataSourcesVM instantiates a new DataSourcesVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSourcesVM() *DataSourcesVM {
	this := DataSourcesVM{}
	return &this
}

// NewDataSourcesVMWithDefaults instantiates a new DataSourcesVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourcesVMWithDefaults() *DataSourcesVM {
	this := DataSourcesVM{}
	return &this
}

// GetDataSources returns the DataSources field value if set, zero value otherwise.
func (o *DataSourcesVM) GetDataSources() []DataSourceVM {
	if o == nil || o.DataSources == nil {
		var ret []DataSourceVM
		return ret
	}
	return *o.DataSources
}

// GetDataSourcesOk returns a tuple with the DataSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourcesVM) GetDataSourcesOk() (*[]DataSourceVM, bool) {
	if o == nil || o.DataSources == nil {
		return nil, false
	}
	return o.DataSources, true
}

// HasDataSources returns a boolean if a field has been set.
func (o *DataSourcesVM) HasDataSources() bool {
	if o != nil && o.DataSources != nil {
		return true
	}

	return false
}

// SetDataSources gets a reference to the given []DataSourceVM and assigns it to the DataSources field.
func (o *DataSourcesVM) SetDataSources(v []DataSourceVM) {
	o.DataSources = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *DataSourcesVM) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourcesVM) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *DataSourcesVM) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *DataSourcesVM) SetCount(v int64) {
	o.Count = &v
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *DataSourcesVM) GetSkip() int32 {
	if o == nil || o.Skip == nil {
		var ret int32
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourcesVM) GetSkipOk() (*int32, bool) {
	if o == nil || o.Skip == nil {
		return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *DataSourcesVM) HasSkip() bool {
	if o != nil && o.Skip != nil {
		return true
	}

	return false
}

// SetSkip gets a reference to the given int32 and assigns it to the Skip field.
func (o *DataSourcesVM) SetSkip(v int32) {
	o.Skip = &v
}

// GetTake returns the Take field value if set, zero value otherwise.
func (o *DataSourcesVM) GetTake() int32 {
	if o == nil || o.Take == nil {
		var ret int32
		return ret
	}
	return *o.Take
}

// GetTakeOk returns a tuple with the Take field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourcesVM) GetTakeOk() (*int32, bool) {
	if o == nil || o.Take == nil {
		return nil, false
	}
	return o.Take, true
}

// HasTake returns a boolean if a field has been set.
func (o *DataSourcesVM) HasTake() bool {
	if o != nil && o.Take != nil {
		return true
	}

	return false
}

// SetTake gets a reference to the given int32 and assigns it to the Take field.
func (o *DataSourcesVM) SetTake(v int32) {
	o.Take = &v
}

func (o DataSourcesVM) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataSources != nil {
		toSerialize["dataSources"] = o.DataSources
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Skip != nil {
		toSerialize["skip"] = o.Skip
	}
	if o.Take != nil {
		toSerialize["take"] = o.Take
	}
	return json.Marshal(toSerialize)
}

type NullableDataSourcesVM struct {
	value *DataSourcesVM
	isSet bool
}

func (v NullableDataSourcesVM) Get() *DataSourcesVM {
	return v.value
}

func (v *NullableDataSourcesVM) Set(val *DataSourcesVM) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourcesVM) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourcesVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourcesVM(val *DataSourcesVM) *NullableDataSourcesVM {
	return &NullableDataSourcesVM{value: val, isSet: true}
}

func (v NullableDataSourcesVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourcesVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


