/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// SubscriptionExecute the model 'SubscriptionExecute'
type SubscriptionExecute int32

// List of SubscriptionExecute
const (
	_0 SubscriptionExecute = 0
	_4 SubscriptionExecute = 4
	_MINUS_1 SubscriptionExecute = -1
)

// All allowed values of SubscriptionExecute enum
var AllowedSubscriptionExecuteEnumValues = []SubscriptionExecute{
	0,
	4,
	-1,
}

func (v *SubscriptionExecute) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionExecute(value)
	for _, existing := range AllowedSubscriptionExecuteEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionExecute", value)
}

// NewSubscriptionExecuteFromValue returns a pointer to a valid SubscriptionExecute
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionExecuteFromValue(v int32) (*SubscriptionExecute, error) {
	ev := SubscriptionExecute(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionExecute: valid values are %v", v, AllowedSubscriptionExecuteEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionExecute) IsValid() bool {
	for _, existing := range AllowedSubscriptionExecuteEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionExecute value
func (v SubscriptionExecute) Ptr() *SubscriptionExecute {
	return &v
}

type NullableSubscriptionExecute struct {
	value *SubscriptionExecute
	isSet bool
}

func (v NullableSubscriptionExecute) Get() *SubscriptionExecute {
	return v.value
}

func (v *NullableSubscriptionExecute) Set(val *SubscriptionExecute) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionExecute) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionExecute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionExecute(val *SubscriptionExecute) *NullableSubscriptionExecute {
	return &NullableSubscriptionExecute{value: val, isSet: true}
}

func (v NullableSubscriptionExecute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionExecute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

