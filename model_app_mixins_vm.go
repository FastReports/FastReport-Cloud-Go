/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppMixinsVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppMixinsVM{}

// AppMixinsVM struct for AppMixinsVM
type AppMixinsVM struct {
	CloudBaseVM
	Head NullableString `json:"head,omitempty"`
	Body NullableString `json:"body,omitempty"`
	T string `json:"$t"`
}

type _AppMixinsVM AppMixinsVM

// NewAppMixinsVM instantiates a new AppMixinsVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppMixinsVM(t string) *AppMixinsVM {
	this := AppMixinsVM{}
	this.T = t
	return &this
}

// NewAppMixinsVMWithDefaults instantiates a new AppMixinsVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppMixinsVMWithDefaults() *AppMixinsVM {
	this := AppMixinsVM{}
	return &this
}

// GetHead returns the Head field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppMixinsVM) GetHead() string {
	if o == nil || IsNil(o.Head.Get()) {
		var ret string
		return ret
	}
	return *o.Head.Get()
}

// GetHeadOk returns a tuple with the Head field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppMixinsVM) GetHeadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Head.Get(), o.Head.IsSet()
}

// HasHead returns a boolean if a field has been set.
func (o *AppMixinsVM) HasHead() bool {
	if o != nil && o.Head.IsSet() {
		return true
	}

	return false
}

// SetHead gets a reference to the given NullableString and assigns it to the Head field.
func (o *AppMixinsVM) SetHead(v string) {
	o.Head.Set(&v)
}
// SetHeadNil sets the value for Head to be an explicit nil
func (o *AppMixinsVM) SetHeadNil() {
	o.Head.Set(nil)
}

// UnsetHead ensures that no value is present for Head, not even an explicit nil
func (o *AppMixinsVM) UnsetHead() {
	o.Head.Unset()
}

// GetBody returns the Body field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppMixinsVM) GetBody() string {
	if o == nil || IsNil(o.Body.Get()) {
		var ret string
		return ret
	}
	return *o.Body.Get()
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppMixinsVM) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Body.Get(), o.Body.IsSet()
}

// HasBody returns a boolean if a field has been set.
func (o *AppMixinsVM) HasBody() bool {
	if o != nil && o.Body.IsSet() {
		return true
	}

	return false
}

// SetBody gets a reference to the given NullableString and assigns it to the Body field.
func (o *AppMixinsVM) SetBody(v string) {
	o.Body.Set(&v)
}
// SetBodyNil sets the value for Body to be an explicit nil
func (o *AppMixinsVM) SetBodyNil() {
	o.Body.Set(nil)
}

// UnsetBody ensures that no value is present for Body, not even an explicit nil
func (o *AppMixinsVM) UnsetBody() {
	o.Body.Unset()
}

// GetT returns the T field value
func (o *AppMixinsVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *AppMixinsVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *AppMixinsVM) SetT(v string) {
	o.T = v
}

func (o AppMixinsVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppMixinsVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	if o.Head.IsSet() {
		toSerialize["head"] = o.Head.Get()
	}
	if o.Body.IsSet() {
		toSerialize["body"] = o.Body.Get()
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *AppMixinsVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppMixinsVM := _AppMixinsVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppMixinsVM)

	if err != nil {
		return err
	}

	*o = AppMixinsVM(varAppMixinsVM)

	return err
}

type NullableAppMixinsVM struct {
	value *AppMixinsVM
	isSet bool
}

func (v NullableAppMixinsVM) Get() *AppMixinsVM {
	return v.value
}

func (v *NullableAppMixinsVM) Set(val *AppMixinsVM) {
	v.value = val
	v.isSet = true
}

func (v NullableAppMixinsVM) IsSet() bool {
	return v.isSet
}

func (v *NullableAppMixinsVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppMixinsVM(val *AppMixinsVM) *NullableAppMixinsVM {
	return &NullableAppMixinsVM{value: val, isSet: true}
}

func (v NullableAppMixinsVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppMixinsVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


