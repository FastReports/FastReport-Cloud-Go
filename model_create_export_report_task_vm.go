/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateExportReportTaskVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateExportReportTaskVM{}

// CreateExportReportTaskVM struct for CreateExportReportTaskVM
type CreateExportReportTaskVM struct {
	CreateTransformTaskBaseVM
	ExportParameters map[string]string `json:"exportParameters,omitempty"`
	Format *ExportFormat `json:"format,omitempty"`
	PagesCount *int32 `json:"pagesCount,omitempty"`
	T string `json:"$t"`
}

type _CreateExportReportTaskVM CreateExportReportTaskVM

// NewCreateExportReportTaskVM instantiates a new CreateExportReportTaskVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateExportReportTaskVM(t string) *CreateExportReportTaskVM {
	this := CreateExportReportTaskVM{}
	this.T = t
	return &this
}

// NewCreateExportReportTaskVMWithDefaults instantiates a new CreateExportReportTaskVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateExportReportTaskVMWithDefaults() *CreateExportReportTaskVM {
	this := CreateExportReportTaskVM{}
	return &this
}

// GetExportParameters returns the ExportParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateExportReportTaskVM) GetExportParameters() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.ExportParameters
}

// GetExportParametersOk returns a tuple with the ExportParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateExportReportTaskVM) GetExportParametersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ExportParameters) {
		return nil, false
	}
	return &o.ExportParameters, true
}

// HasExportParameters returns a boolean if a field has been set.
func (o *CreateExportReportTaskVM) HasExportParameters() bool {
	if o != nil && IsNil(o.ExportParameters) {
		return true
	}

	return false
}

// SetExportParameters gets a reference to the given map[string]string and assigns it to the ExportParameters field.
func (o *CreateExportReportTaskVM) SetExportParameters(v map[string]string) {
	o.ExportParameters = v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *CreateExportReportTaskVM) GetFormat() ExportFormat {
	if o == nil || IsNil(o.Format) {
		var ret ExportFormat
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateExportReportTaskVM) GetFormatOk() (*ExportFormat, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *CreateExportReportTaskVM) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given ExportFormat and assigns it to the Format field.
func (o *CreateExportReportTaskVM) SetFormat(v ExportFormat) {
	o.Format = &v
}

// GetPagesCount returns the PagesCount field value if set, zero value otherwise.
func (o *CreateExportReportTaskVM) GetPagesCount() int32 {
	if o == nil || IsNil(o.PagesCount) {
		var ret int32
		return ret
	}
	return *o.PagesCount
}

// GetPagesCountOk returns a tuple with the PagesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateExportReportTaskVM) GetPagesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PagesCount) {
		return nil, false
	}
	return o.PagesCount, true
}

// HasPagesCount returns a boolean if a field has been set.
func (o *CreateExportReportTaskVM) HasPagesCount() bool {
	if o != nil && !IsNil(o.PagesCount) {
		return true
	}

	return false
}

// SetPagesCount gets a reference to the given int32 and assigns it to the PagesCount field.
func (o *CreateExportReportTaskVM) SetPagesCount(v int32) {
	o.PagesCount = &v
}

// GetT returns the T field value
func (o *CreateExportReportTaskVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *CreateExportReportTaskVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *CreateExportReportTaskVM) SetT(v string) {
	o.T = v
}

func (o CreateExportReportTaskVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateExportReportTaskVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCreateTransformTaskBaseVM, errCreateTransformTaskBaseVM := json.Marshal(o.CreateTransformTaskBaseVM)
	if errCreateTransformTaskBaseVM != nil {
		return map[string]interface{}{}, errCreateTransformTaskBaseVM
	}
	errCreateTransformTaskBaseVM = json.Unmarshal([]byte(serializedCreateTransformTaskBaseVM), &toSerialize)
	if errCreateTransformTaskBaseVM != nil {
		return map[string]interface{}{}, errCreateTransformTaskBaseVM
	}
	if o.ExportParameters != nil {
		toSerialize["exportParameters"] = o.ExportParameters
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.PagesCount) {
		toSerialize["pagesCount"] = o.PagesCount
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *CreateExportReportTaskVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateExportReportTaskVM := _CreateExportReportTaskVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateExportReportTaskVM)

	if err != nil {
		return err
	}

	*o = CreateExportReportTaskVM(varCreateExportReportTaskVM)

	return err
}

type NullableCreateExportReportTaskVM struct {
	value *CreateExportReportTaskVM
	isSet bool
}

func (v NullableCreateExportReportTaskVM) Get() *CreateExportReportTaskVM {
	return v.value
}

func (v *NullableCreateExportReportTaskVM) Set(val *CreateExportReportTaskVM) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateExportReportTaskVM) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateExportReportTaskVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateExportReportTaskVM(val *CreateExportReportTaskVM) *NullableCreateExportReportTaskVM {
	return &NullableCreateExportReportTaskVM{value: val, isSet: true}
}

func (v NullableCreateExportReportTaskVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateExportReportTaskVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


