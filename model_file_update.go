/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// FileUpdate the model 'FileUpdate'
type FileUpdate int32

// List of FileUpdate
const (
	_0 FileUpdate = 0
	_1 FileUpdate = 1
	_2 FileUpdate = 2
	_4 FileUpdate = 4
	_8 FileUpdate = 8
	_MINUS_1 FileUpdate = -1
)

// All allowed values of FileUpdate enum
var AllowedFileUpdateEnumValues = []FileUpdate{
	0,
	1,
	2,
	4,
	8,
	-1,
}

func (v *FileUpdate) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileUpdate(value)
	for _, existing := range AllowedFileUpdateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileUpdate", value)
}

// NewFileUpdateFromValue returns a pointer to a valid FileUpdate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileUpdateFromValue(v int32) (*FileUpdate, error) {
	ev := FileUpdate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileUpdate: valid values are %v", v, AllowedFileUpdateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileUpdate) IsValid() bool {
	for _, existing := range AllowedFileUpdateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileUpdate value
func (v FileUpdate) Ptr() *FileUpdate {
	return &v
}

type NullableFileUpdate struct {
	value *FileUpdate
	isSet bool
}

func (v NullableFileUpdate) Get() *FileUpdate {
	return v.value
}

func (v *NullableFileUpdate) Set(val *FileUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableFileUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableFileUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileUpdate(val *FileUpdate) *NullableFileUpdate {
	return &NullableFileUpdate{value: val, isSet: true}
}

func (v NullableFileUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

