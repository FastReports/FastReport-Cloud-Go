/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// AdminAdministrate the model 'AdminAdministrate'
type AdminAdministrate int32

// List of AdminAdministrate
const (
	_0 AdminAdministrate = 0
	_1 AdminAdministrate = 1
	_2 AdminAdministrate = 2
	_4 AdminAdministrate = 4
	_8 AdminAdministrate = 8
	_16 AdminAdministrate = 16
	_MINUS_1 AdminAdministrate = -1
)

// All allowed values of AdminAdministrate enum
var AllowedAdminAdministrateEnumValues = []AdminAdministrate{
	0,
	1,
	2,
	4,
	8,
	16,
	-1,
}

func (v *AdminAdministrate) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdminAdministrate(value)
	for _, existing := range AllowedAdminAdministrateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdminAdministrate", value)
}

// NewAdminAdministrateFromValue returns a pointer to a valid AdminAdministrate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdminAdministrateFromValue(v int32) (*AdminAdministrate, error) {
	ev := AdminAdministrate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdminAdministrate: valid values are %v", v, AllowedAdminAdministrateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdminAdministrate) IsValid() bool {
	for _, existing := range AllowedAdminAdministrateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdminAdministrate value
func (v AdminAdministrate) Ptr() *AdminAdministrate {
	return &v
}

type NullableAdminAdministrate struct {
	value *AdminAdministrate
	isSet bool
}

func (v NullableAdminAdministrate) Get() *AdminAdministrate {
	return v.value
}

func (v *NullableAdminAdministrate) Set(val *AdminAdministrate) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminAdministrate) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminAdministrate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminAdministrate(val *AdminAdministrate) *NullableAdminAdministrate {
	return &NullableAdminAdministrate{value: val, isSet: true}
}

func (v NullableAdminAdministrate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminAdministrate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

