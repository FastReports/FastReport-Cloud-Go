/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CreateSubscriptionInviteVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSubscriptionInviteVM{}

// CreateSubscriptionInviteVM struct for CreateSubscriptionInviteVM
type CreateSubscriptionInviteVM struct {
	CloudBaseVM
	Usages *int64 `json:"usages,omitempty"`
	Durable *bool `json:"durable,omitempty"`
	ExpiredDate *time.Time `json:"expiredDate,omitempty"`
	T string `json:"$t"`
}

type _CreateSubscriptionInviteVM CreateSubscriptionInviteVM

// NewCreateSubscriptionInviteVM instantiates a new CreateSubscriptionInviteVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSubscriptionInviteVM(t string) *CreateSubscriptionInviteVM {
	this := CreateSubscriptionInviteVM{}
	this.T = t
	return &this
}

// NewCreateSubscriptionInviteVMWithDefaults instantiates a new CreateSubscriptionInviteVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSubscriptionInviteVMWithDefaults() *CreateSubscriptionInviteVM {
	this := CreateSubscriptionInviteVM{}
	return &this
}

// GetUsages returns the Usages field value if set, zero value otherwise.
func (o *CreateSubscriptionInviteVM) GetUsages() int64 {
	if o == nil || IsNil(o.Usages) {
		var ret int64
		return ret
	}
	return *o.Usages
}

// GetUsagesOk returns a tuple with the Usages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubscriptionInviteVM) GetUsagesOk() (*int64, bool) {
	if o == nil || IsNil(o.Usages) {
		return nil, false
	}
	return o.Usages, true
}

// HasUsages returns a boolean if a field has been set.
func (o *CreateSubscriptionInviteVM) HasUsages() bool {
	if o != nil && !IsNil(o.Usages) {
		return true
	}

	return false
}

// SetUsages gets a reference to the given int64 and assigns it to the Usages field.
func (o *CreateSubscriptionInviteVM) SetUsages(v int64) {
	o.Usages = &v
}

// GetDurable returns the Durable field value if set, zero value otherwise.
func (o *CreateSubscriptionInviteVM) GetDurable() bool {
	if o == nil || IsNil(o.Durable) {
		var ret bool
		return ret
	}
	return *o.Durable
}

// GetDurableOk returns a tuple with the Durable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubscriptionInviteVM) GetDurableOk() (*bool, bool) {
	if o == nil || IsNil(o.Durable) {
		return nil, false
	}
	return o.Durable, true
}

// HasDurable returns a boolean if a field has been set.
func (o *CreateSubscriptionInviteVM) HasDurable() bool {
	if o != nil && !IsNil(o.Durable) {
		return true
	}

	return false
}

// SetDurable gets a reference to the given bool and assigns it to the Durable field.
func (o *CreateSubscriptionInviteVM) SetDurable(v bool) {
	o.Durable = &v
}

// GetExpiredDate returns the ExpiredDate field value if set, zero value otherwise.
func (o *CreateSubscriptionInviteVM) GetExpiredDate() time.Time {
	if o == nil || IsNil(o.ExpiredDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpiredDate
}

// GetExpiredDateOk returns a tuple with the ExpiredDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubscriptionInviteVM) GetExpiredDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiredDate) {
		return nil, false
	}
	return o.ExpiredDate, true
}

// HasExpiredDate returns a boolean if a field has been set.
func (o *CreateSubscriptionInviteVM) HasExpiredDate() bool {
	if o != nil && !IsNil(o.ExpiredDate) {
		return true
	}

	return false
}

// SetExpiredDate gets a reference to the given time.Time and assigns it to the ExpiredDate field.
func (o *CreateSubscriptionInviteVM) SetExpiredDate(v time.Time) {
	o.ExpiredDate = &v
}

// GetT returns the T field value
func (o *CreateSubscriptionInviteVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *CreateSubscriptionInviteVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *CreateSubscriptionInviteVM) SetT(v string) {
	o.T = v
}

func (o CreateSubscriptionInviteVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSubscriptionInviteVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	if !IsNil(o.Usages) {
		toSerialize["usages"] = o.Usages
	}
	if !IsNil(o.Durable) {
		toSerialize["durable"] = o.Durable
	}
	if !IsNil(o.ExpiredDate) {
		toSerialize["expiredDate"] = o.ExpiredDate
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *CreateSubscriptionInviteVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSubscriptionInviteVM := _CreateSubscriptionInviteVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateSubscriptionInviteVM)

	if err != nil {
		return err
	}

	*o = CreateSubscriptionInviteVM(varCreateSubscriptionInviteVM)

	return err
}

type NullableCreateSubscriptionInviteVM struct {
	value *CreateSubscriptionInviteVM
	isSet bool
}

func (v NullableCreateSubscriptionInviteVM) Get() *CreateSubscriptionInviteVM {
	return v.value
}

func (v *NullableCreateSubscriptionInviteVM) Set(val *CreateSubscriptionInviteVM) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubscriptionInviteVM) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubscriptionInviteVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubscriptionInviteVM(val *CreateSubscriptionInviteVM) *NullableCreateSubscriptionInviteVM {
	return &NullableCreateSubscriptionInviteVM{value: val, isSet: true}
}

func (v NullableCreateSubscriptionInviteVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubscriptionInviteVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


