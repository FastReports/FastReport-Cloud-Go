/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
)

// checks if the DataSourceParameterTypeVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSourceParameterTypeVM{}

// DataSourceParameterTypeVM struct for DataSourceParameterTypeVM
type DataSourceParameterTypeVM struct {
	Name NullableString `json:"name,omitempty"`
	Value *int32 `json:"value,omitempty"`
}

// NewDataSourceParameterTypeVM instantiates a new DataSourceParameterTypeVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSourceParameterTypeVM() *DataSourceParameterTypeVM {
	this := DataSourceParameterTypeVM{}
	return &this
}

// NewDataSourceParameterTypeVMWithDefaults instantiates a new DataSourceParameterTypeVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceParameterTypeVMWithDefaults() *DataSourceParameterTypeVM {
	this := DataSourceParameterTypeVM{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataSourceParameterTypeVM) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataSourceParameterTypeVM) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *DataSourceParameterTypeVM) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *DataSourceParameterTypeVM) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *DataSourceParameterTypeVM) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *DataSourceParameterTypeVM) UnsetName() {
	o.Name.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DataSourceParameterTypeVM) GetValue() int32 {
	if o == nil || IsNil(o.Value) {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceParameterTypeVM) GetValueOk() (*int32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DataSourceParameterTypeVM) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *DataSourceParameterTypeVM) SetValue(v int32) {
	o.Value = &v
}

func (o DataSourceParameterTypeVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSourceParameterTypeVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableDataSourceParameterTypeVM struct {
	value *DataSourceParameterTypeVM
	isSet bool
}

func (v NullableDataSourceParameterTypeVM) Get() *DataSourceParameterTypeVM {
	return v.value
}

func (v *NullableDataSourceParameterTypeVM) Set(val *DataSourceParameterTypeVM) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceParameterTypeVM) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceParameterTypeVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceParameterTypeVM(val *DataSourceParameterTypeVM) *NullableDataSourceParameterTypeVM {
	return &NullableDataSourceParameterTypeVM{value: val, isSet: true}
}

func (v NullableDataSourceParameterTypeVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceParameterTypeVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


