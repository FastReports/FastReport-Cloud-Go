/*
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// DataSourceCreate the model 'DataSourceCreate'
type DataSourceCreate int32

// List of DataSourceCreate
const (
	_0 DataSourceCreate = 0
	_MINUS_1 DataSourceCreate = -1
)

var allowedDataSourceCreateEnumValues = []DataSourceCreate{
	0,
	-1,
}

func (v *DataSourceCreate) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataSourceCreate(value)
	for _, existing := range allowedDataSourceCreateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataSourceCreate", value)
}

// NewDataSourceCreateFromValue returns a pointer to a valid DataSourceCreate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataSourceCreateFromValue(v int32) (*DataSourceCreate, error) {
	ev := DataSourceCreate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataSourceCreate: valid values are %v", v, allowedDataSourceCreateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataSourceCreate) IsValid() bool {
	for _, existing := range allowedDataSourceCreateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataSourceCreate value
func (v DataSourceCreate) Ptr() *DataSourceCreate {
	return &v
}

type NullableDataSourceCreate struct {
	value *DataSourceCreate
	isSet bool
}

func (v NullableDataSourceCreate) Get() *DataSourceCreate {
	return v.value
}

func (v *NullableDataSourceCreate) Set(val *DataSourceCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceCreate(val *DataSourceCreate) *NullableDataSourceCreate {
	return &NullableDataSourceCreate{value: val, isSet: true}
}

func (v NullableDataSourceCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

