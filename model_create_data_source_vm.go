/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateDataSourceVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDataSourceVM{}

// CreateDataSourceVM struct for CreateDataSourceVM
type CreateDataSourceVM struct {
	CloudBaseVM
	Name NullableString `json:"name,omitempty"`
	ConnectionString string `json:"connectionString"`
	SubscriptionId string `json:"subscriptionId"`
	ConnectionType *DataSourceConnectionType `json:"connectionType,omitempty"`
	SelectCommands []DataSourceSelectCommandVM `json:"selectCommands,omitempty"`
	T string `json:"$t"`
}

type _CreateDataSourceVM CreateDataSourceVM

// NewCreateDataSourceVM instantiates a new CreateDataSourceVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDataSourceVM(connectionString string, subscriptionId string, t string) *CreateDataSourceVM {
	this := CreateDataSourceVM{}
	this.T = t
	return &this
}

// NewCreateDataSourceVMWithDefaults instantiates a new CreateDataSourceVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDataSourceVMWithDefaults() *CreateDataSourceVM {
	this := CreateDataSourceVM{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateDataSourceVM) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateDataSourceVM) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CreateDataSourceVM) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CreateDataSourceVM) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CreateDataSourceVM) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CreateDataSourceVM) UnsetName() {
	o.Name.Unset()
}

// GetConnectionString returns the ConnectionString field value
func (o *CreateDataSourceVM) GetConnectionString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionString
}

// GetConnectionStringOk returns a tuple with the ConnectionString field value
// and a boolean to check if the value has been set.
func (o *CreateDataSourceVM) GetConnectionStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionString, true
}

// SetConnectionString sets field value
func (o *CreateDataSourceVM) SetConnectionString(v string) {
	o.ConnectionString = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *CreateDataSourceVM) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *CreateDataSourceVM) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *CreateDataSourceVM) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *CreateDataSourceVM) GetConnectionType() DataSourceConnectionType {
	if o == nil || IsNil(o.ConnectionType) {
		var ret DataSourceConnectionType
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataSourceVM) GetConnectionTypeOk() (*DataSourceConnectionType, bool) {
	if o == nil || IsNil(o.ConnectionType) {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *CreateDataSourceVM) HasConnectionType() bool {
	if o != nil && !IsNil(o.ConnectionType) {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given DataSourceConnectionType and assigns it to the ConnectionType field.
func (o *CreateDataSourceVM) SetConnectionType(v DataSourceConnectionType) {
	o.ConnectionType = &v
}

// GetSelectCommands returns the SelectCommands field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateDataSourceVM) GetSelectCommands() []DataSourceSelectCommandVM {
	if o == nil {
		var ret []DataSourceSelectCommandVM
		return ret
	}
	return o.SelectCommands
}

// GetSelectCommandsOk returns a tuple with the SelectCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateDataSourceVM) GetSelectCommandsOk() ([]DataSourceSelectCommandVM, bool) {
	if o == nil || IsNil(o.SelectCommands) {
		return nil, false
	}
	return o.SelectCommands, true
}

// HasSelectCommands returns a boolean if a field has been set.
func (o *CreateDataSourceVM) HasSelectCommands() bool {
	if o != nil && IsNil(o.SelectCommands) {
		return true
	}

	return false
}

// SetSelectCommands gets a reference to the given []DataSourceSelectCommandVM and assigns it to the SelectCommands field.
func (o *CreateDataSourceVM) SetSelectCommands(v []DataSourceSelectCommandVM) {
	o.SelectCommands = v
}

// GetT returns the T field value
func (o *CreateDataSourceVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *CreateDataSourceVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *CreateDataSourceVM) SetT(v string) {
	o.T = v
}

func (o CreateDataSourceVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDataSourceVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	toSerialize["connectionString"] = o.ConnectionString
	toSerialize["subscriptionId"] = o.SubscriptionId
	if !IsNil(o.ConnectionType) {
		toSerialize["connectionType"] = o.ConnectionType
	}
	if o.SelectCommands != nil {
		toSerialize["selectCommands"] = o.SelectCommands
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *CreateDataSourceVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectionString",
		"subscriptionId",
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDataSourceVM := _CreateDataSourceVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateDataSourceVM)

	if err != nil {
		return err
	}

	*o = CreateDataSourceVM(varCreateDataSourceVM)

	return err
}

type NullableCreateDataSourceVM struct {
	value *CreateDataSourceVM
	isSet bool
}

func (v NullableCreateDataSourceVM) Get() *CreateDataSourceVM {
	return v.value
}

func (v *NullableCreateDataSourceVM) Set(val *CreateDataSourceVM) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDataSourceVM) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDataSourceVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDataSourceVM(val *CreateDataSourceVM) *NullableCreateDataSourceVM {
	return &NullableCreateDataSourceVM{value: val, isSet: true}
}

func (v NullableCreateDataSourceVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDataSourceVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


