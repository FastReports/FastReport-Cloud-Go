/*
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
)

// CreateDataSourceVM struct for CreateDataSourceVM
type CreateDataSourceVM struct {
	Name *string `json:"name,omitempty"`
	ConnectionString string `json:"connectionString"`
	SubscriptionId string `json:"subscriptionId"`
	ConnectionType *string `json:"connectionType,omitempty"`
}

// NewCreateDataSourceVM instantiates a new CreateDataSourceVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDataSourceVM(connectionString string, subscriptionId string) *CreateDataSourceVM {
	this := CreateDataSourceVM{}
	this.ConnectionString = connectionString
	this.SubscriptionId = subscriptionId
	return &this
}

// NewCreateDataSourceVMWithDefaults instantiates a new CreateDataSourceVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDataSourceVMWithDefaults() *CreateDataSourceVM {
	this := CreateDataSourceVM{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateDataSourceVM) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataSourceVM) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateDataSourceVM) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateDataSourceVM) SetName(v string) {
	o.Name = &v
}

// GetConnectionString returns the ConnectionString field value
func (o *CreateDataSourceVM) GetConnectionString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionString
}

// GetConnectionStringOk returns a tuple with the ConnectionString field value
// and a boolean to check if the value has been set.
func (o *CreateDataSourceVM) GetConnectionStringOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConnectionString, true
}

// SetConnectionString sets field value
func (o *CreateDataSourceVM) SetConnectionString(v string) {
	o.ConnectionString = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *CreateDataSourceVM) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *CreateDataSourceVM) GetSubscriptionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *CreateDataSourceVM) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *CreateDataSourceVM) GetConnectionType() string {
	if o == nil || o.ConnectionType == nil {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataSourceVM) GetConnectionTypeOk() (*string, bool) {
	if o == nil || o.ConnectionType == nil {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *CreateDataSourceVM) HasConnectionType() bool {
	if o != nil && o.ConnectionType != nil {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *CreateDataSourceVM) SetConnectionType(v string) {
	o.ConnectionType = &v
}

func (o CreateDataSourceVM) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["connectionString"] = o.ConnectionString
	}
	if true {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	if o.ConnectionType != nil {
		toSerialize["connectionType"] = o.ConnectionType
	}
	return json.Marshal(toSerialize)
}

type NullableCreateDataSourceVM struct {
	value *CreateDataSourceVM
	isSet bool
}

func (v NullableCreateDataSourceVM) Get() *CreateDataSourceVM {
	return v.value
}

func (v *NullableCreateDataSourceVM) Set(val *CreateDataSourceVM) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDataSourceVM) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDataSourceVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDataSourceVM(val *CreateDataSourceVM) *NullableCreateDataSourceVM {
	return &NullableCreateDataSourceVM{value: val, isSet: true}
}

func (v NullableCreateDataSourceVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDataSourceVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


