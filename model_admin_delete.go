/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// AdminDelete the model 'AdminDelete'
type AdminDelete int32

// List of AdminDelete
const (
	_0 AdminDelete = 0
	_1 AdminDelete = 1
	_2 AdminDelete = 2
	_4 AdminDelete = 4
	_8 AdminDelete = 8
	_16 AdminDelete = 16
	_32 AdminDelete = 32
	_64 AdminDelete = 64
	_128 AdminDelete = 128
	_256 AdminDelete = 256
	_MINUS_1 AdminDelete = -1
)

// All allowed values of AdminDelete enum
var AllowedAdminDeleteEnumValues = []AdminDelete{
	0,
	1,
	2,
	4,
	8,
	16,
	32,
	64,
	128,
	256,
	-1,
}

func (v *AdminDelete) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdminDelete(value)
	for _, existing := range AllowedAdminDeleteEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdminDelete", value)
}

// NewAdminDeleteFromValue returns a pointer to a valid AdminDelete
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdminDeleteFromValue(v int32) (*AdminDelete, error) {
	ev := AdminDelete(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdminDelete: valid values are %v", v, AllowedAdminDeleteEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdminDelete) IsValid() bool {
	for _, existing := range AllowedAdminDeleteEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdminDelete value
func (v AdminDelete) Ptr() *AdminDelete {
	return &v
}

type NullableAdminDelete struct {
	value *AdminDelete
	isSet bool
}

func (v NullableAdminDelete) Get() *AdminDelete {
	return v.value
}

func (v *NullableAdminDelete) Set(val *AdminDelete) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminDelete) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminDelete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminDelete(val *AdminDelete) *NullableAdminDelete {
	return &NullableAdminDelete{value: val, isSet: true}
}

func (v NullableAdminDelete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminDelete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

