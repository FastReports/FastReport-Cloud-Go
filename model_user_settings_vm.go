/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UserSettingsVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSettingsVM{}

// UserSettingsVM struct for UserSettingsVM
type UserSettingsVM struct {
	CloudBaseVM
	ProfileVisibility *ProfileVisibility `json:"profileVisibility,omitempty"`
	DefaultSubscription NullableString `json:"defaultSubscription,omitempty"`
	ShowHiddenFilesAndFolders *bool `json:"showHiddenFilesAndFolders,omitempty"`
	SlaAcceptedDateTime NullableTime `json:"slaAcceptedDateTime,omitempty"`
	SubscribedNotifications []AuditType `json:"subscribedNotifications,omitempty"`
	T string `json:"$t"`
}

type _UserSettingsVM UserSettingsVM

// NewUserSettingsVM instantiates a new UserSettingsVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettingsVM(t string) *UserSettingsVM {
	this := UserSettingsVM{}
	this.T = t
	return &this
}

// NewUserSettingsVMWithDefaults instantiates a new UserSettingsVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsVMWithDefaults() *UserSettingsVM {
	this := UserSettingsVM{}
	return &this
}

// GetProfileVisibility returns the ProfileVisibility field value if set, zero value otherwise.
func (o *UserSettingsVM) GetProfileVisibility() ProfileVisibility {
	if o == nil || IsNil(o.ProfileVisibility) {
		var ret ProfileVisibility
		return ret
	}
	return *o.ProfileVisibility
}

// GetProfileVisibilityOk returns a tuple with the ProfileVisibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettingsVM) GetProfileVisibilityOk() (*ProfileVisibility, bool) {
	if o == nil || IsNil(o.ProfileVisibility) {
		return nil, false
	}
	return o.ProfileVisibility, true
}

// HasProfileVisibility returns a boolean if a field has been set.
func (o *UserSettingsVM) HasProfileVisibility() bool {
	if o != nil && !IsNil(o.ProfileVisibility) {
		return true
	}

	return false
}

// SetProfileVisibility gets a reference to the given ProfileVisibility and assigns it to the ProfileVisibility field.
func (o *UserSettingsVM) SetProfileVisibility(v ProfileVisibility) {
	o.ProfileVisibility = &v
}

// GetDefaultSubscription returns the DefaultSubscription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserSettingsVM) GetDefaultSubscription() string {
	if o == nil || IsNil(o.DefaultSubscription.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultSubscription.Get()
}

// GetDefaultSubscriptionOk returns a tuple with the DefaultSubscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserSettingsVM) GetDefaultSubscriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultSubscription.Get(), o.DefaultSubscription.IsSet()
}

// HasDefaultSubscription returns a boolean if a field has been set.
func (o *UserSettingsVM) HasDefaultSubscription() bool {
	if o != nil && o.DefaultSubscription.IsSet() {
		return true
	}

	return false
}

// SetDefaultSubscription gets a reference to the given NullableString and assigns it to the DefaultSubscription field.
func (o *UserSettingsVM) SetDefaultSubscription(v string) {
	o.DefaultSubscription.Set(&v)
}
// SetDefaultSubscriptionNil sets the value for DefaultSubscription to be an explicit nil
func (o *UserSettingsVM) SetDefaultSubscriptionNil() {
	o.DefaultSubscription.Set(nil)
}

// UnsetDefaultSubscription ensures that no value is present for DefaultSubscription, not even an explicit nil
func (o *UserSettingsVM) UnsetDefaultSubscription() {
	o.DefaultSubscription.Unset()
}

// GetShowHiddenFilesAndFolders returns the ShowHiddenFilesAndFolders field value if set, zero value otherwise.
func (o *UserSettingsVM) GetShowHiddenFilesAndFolders() bool {
	if o == nil || IsNil(o.ShowHiddenFilesAndFolders) {
		var ret bool
		return ret
	}
	return *o.ShowHiddenFilesAndFolders
}

// GetShowHiddenFilesAndFoldersOk returns a tuple with the ShowHiddenFilesAndFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettingsVM) GetShowHiddenFilesAndFoldersOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowHiddenFilesAndFolders) {
		return nil, false
	}
	return o.ShowHiddenFilesAndFolders, true
}

// HasShowHiddenFilesAndFolders returns a boolean if a field has been set.
func (o *UserSettingsVM) HasShowHiddenFilesAndFolders() bool {
	if o != nil && !IsNil(o.ShowHiddenFilesAndFolders) {
		return true
	}

	return false
}

// SetShowHiddenFilesAndFolders gets a reference to the given bool and assigns it to the ShowHiddenFilesAndFolders field.
func (o *UserSettingsVM) SetShowHiddenFilesAndFolders(v bool) {
	o.ShowHiddenFilesAndFolders = &v
}

// GetSlaAcceptedDateTime returns the SlaAcceptedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserSettingsVM) GetSlaAcceptedDateTime() time.Time {
	if o == nil || IsNil(o.SlaAcceptedDateTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.SlaAcceptedDateTime.Get()
}

// GetSlaAcceptedDateTimeOk returns a tuple with the SlaAcceptedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserSettingsVM) GetSlaAcceptedDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.SlaAcceptedDateTime.Get(), o.SlaAcceptedDateTime.IsSet()
}

// HasSlaAcceptedDateTime returns a boolean if a field has been set.
func (o *UserSettingsVM) HasSlaAcceptedDateTime() bool {
	if o != nil && o.SlaAcceptedDateTime.IsSet() {
		return true
	}

	return false
}

// SetSlaAcceptedDateTime gets a reference to the given NullableTime and assigns it to the SlaAcceptedDateTime field.
func (o *UserSettingsVM) SetSlaAcceptedDateTime(v time.Time) {
	o.SlaAcceptedDateTime.Set(&v)
}
// SetSlaAcceptedDateTimeNil sets the value for SlaAcceptedDateTime to be an explicit nil
func (o *UserSettingsVM) SetSlaAcceptedDateTimeNil() {
	o.SlaAcceptedDateTime.Set(nil)
}

// UnsetSlaAcceptedDateTime ensures that no value is present for SlaAcceptedDateTime, not even an explicit nil
func (o *UserSettingsVM) UnsetSlaAcceptedDateTime() {
	o.SlaAcceptedDateTime.Unset()
}

// GetSubscribedNotifications returns the SubscribedNotifications field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserSettingsVM) GetSubscribedNotifications() []AuditType {
	if o == nil {
		var ret []AuditType
		return ret
	}
	return o.SubscribedNotifications
}

// GetSubscribedNotificationsOk returns a tuple with the SubscribedNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserSettingsVM) GetSubscribedNotificationsOk() ([]AuditType, bool) {
	if o == nil || IsNil(o.SubscribedNotifications) {
		return nil, false
	}
	return o.SubscribedNotifications, true
}

// HasSubscribedNotifications returns a boolean if a field has been set.
func (o *UserSettingsVM) HasSubscribedNotifications() bool {
	if o != nil && IsNil(o.SubscribedNotifications) {
		return true
	}

	return false
}

// SetSubscribedNotifications gets a reference to the given []AuditType and assigns it to the SubscribedNotifications field.
func (o *UserSettingsVM) SetSubscribedNotifications(v []AuditType) {
	o.SubscribedNotifications = v
}

// GetT returns the T field value
func (o *UserSettingsVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *UserSettingsVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *UserSettingsVM) SetT(v string) {
	o.T = v
}

func (o UserSettingsVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSettingsVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	if !IsNil(o.ProfileVisibility) {
		toSerialize["profileVisibility"] = o.ProfileVisibility
	}
	if o.DefaultSubscription.IsSet() {
		toSerialize["defaultSubscription"] = o.DefaultSubscription.Get()
	}
	if !IsNil(o.ShowHiddenFilesAndFolders) {
		toSerialize["showHiddenFilesAndFolders"] = o.ShowHiddenFilesAndFolders
	}
	if o.SlaAcceptedDateTime.IsSet() {
		toSerialize["slaAcceptedDateTime"] = o.SlaAcceptedDateTime.Get()
	}
	if o.SubscribedNotifications != nil {
		toSerialize["subscribedNotifications"] = o.SubscribedNotifications
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *UserSettingsVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSettingsVM := _UserSettingsVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSettingsVM)

	if err != nil {
		return err
	}

	*o = UserSettingsVM(varUserSettingsVM)

	return err
}

type NullableUserSettingsVM struct {
	value *UserSettingsVM
	isSet bool
}

func (v NullableUserSettingsVM) Get() *UserSettingsVM {
	return v.value
}

func (v *NullableUserSettingsVM) Set(val *UserSettingsVM) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettingsVM) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettingsVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettingsVM(val *UserSettingsVM) *NullableUserSettingsVM {
	return &NullableUserSettingsVM{value: val, isSet: true}
}

func (v NullableUserSettingsVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettingsVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


