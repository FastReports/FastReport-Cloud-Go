/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
)

// checks if the FrontendApp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FrontendApp{}

// FrontendApp struct for FrontendApp
type FrontendApp struct {
	Mixins *AppMixins `json:"mixins,omitempty"`
}

// NewFrontendApp instantiates a new FrontendApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFrontendApp() *FrontendApp {
	this := FrontendApp{}
	return &this
}

// NewFrontendAppWithDefaults instantiates a new FrontendApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFrontendAppWithDefaults() *FrontendApp {
	this := FrontendApp{}
	return &this
}

// GetMixins returns the Mixins field value if set, zero value otherwise.
func (o *FrontendApp) GetMixins() AppMixins {
	if o == nil || IsNil(o.Mixins) {
		var ret AppMixins
		return ret
	}
	return *o.Mixins
}

// GetMixinsOk returns a tuple with the Mixins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FrontendApp) GetMixinsOk() (*AppMixins, bool) {
	if o == nil || IsNil(o.Mixins) {
		return nil, false
	}
	return o.Mixins, true
}

// HasMixins returns a boolean if a field has been set.
func (o *FrontendApp) HasMixins() bool {
	if o != nil && !IsNil(o.Mixins) {
		return true
	}

	return false
}

// SetMixins gets a reference to the given AppMixins and assigns it to the Mixins field.
func (o *FrontendApp) SetMixins(v AppMixins) {
	o.Mixins = &v
}

func (o FrontendApp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FrontendApp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mixins) {
		toSerialize["mixins"] = o.Mixins
	}
	return toSerialize, nil
}

type NullableFrontendApp struct {
	value *FrontendApp
	isSet bool
}

func (v NullableFrontendApp) Get() *FrontendApp {
	return v.value
}

func (v *NullableFrontendApp) Set(val *FrontendApp) {
	v.value = val
	v.isSet = true
}

func (v NullableFrontendApp) IsSet() bool {
	return v.isSet
}

func (v *NullableFrontendApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrontendApp(val *FrontendApp) *NullableFrontendApp {
	return &NullableFrontendApp{value: val, isSet: true}
}

func (v NullableFrontendApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrontendApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


