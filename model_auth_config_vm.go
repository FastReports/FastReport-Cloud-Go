/*
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
)

// AuthConfigVM struct for AuthConfigVM
type AuthConfigVM struct {
	UseLocal *bool `json:"useLocal,omitempty"`
	UseOpenId *bool `json:"useOpenId,omitempty"`
	Authority NullableString `json:"authority,omitempty"`
}

// NewAuthConfigVM instantiates a new AuthConfigVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthConfigVM() *AuthConfigVM {
	this := AuthConfigVM{}
	return &this
}

// NewAuthConfigVMWithDefaults instantiates a new AuthConfigVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthConfigVMWithDefaults() *AuthConfigVM {
	this := AuthConfigVM{}
	return &this
}

// GetUseLocal returns the UseLocal field value if set, zero value otherwise.
func (o *AuthConfigVM) GetUseLocal() bool {
	if o == nil || o.UseLocal == nil {
		var ret bool
		return ret
	}
	return *o.UseLocal
}

// GetUseLocalOk returns a tuple with the UseLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthConfigVM) GetUseLocalOk() (*bool, bool) {
	if o == nil || o.UseLocal == nil {
		return nil, false
	}
	return o.UseLocal, true
}

// HasUseLocal returns a boolean if a field has been set.
func (o *AuthConfigVM) HasUseLocal() bool {
	if o != nil && o.UseLocal != nil {
		return true
	}

	return false
}

// SetUseLocal gets a reference to the given bool and assigns it to the UseLocal field.
func (o *AuthConfigVM) SetUseLocal(v bool) {
	o.UseLocal = &v
}

// GetUseOpenId returns the UseOpenId field value if set, zero value otherwise.
func (o *AuthConfigVM) GetUseOpenId() bool {
	if o == nil || o.UseOpenId == nil {
		var ret bool
		return ret
	}
	return *o.UseOpenId
}

// GetUseOpenIdOk returns a tuple with the UseOpenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthConfigVM) GetUseOpenIdOk() (*bool, bool) {
	if o == nil || o.UseOpenId == nil {
		return nil, false
	}
	return o.UseOpenId, true
}

// HasUseOpenId returns a boolean if a field has been set.
func (o *AuthConfigVM) HasUseOpenId() bool {
	if o != nil && o.UseOpenId != nil {
		return true
	}

	return false
}

// SetUseOpenId gets a reference to the given bool and assigns it to the UseOpenId field.
func (o *AuthConfigVM) SetUseOpenId(v bool) {
	o.UseOpenId = &v
}

// GetAuthority returns the Authority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthConfigVM) GetAuthority() string {
	if o == nil || o.Authority.Get() == nil {
		var ret string
		return ret
	}
	return *o.Authority.Get()
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthConfigVM) GetAuthorityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Authority.Get(), o.Authority.IsSet()
}

// HasAuthority returns a boolean if a field has been set.
func (o *AuthConfigVM) HasAuthority() bool {
	if o != nil && o.Authority.IsSet() {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given NullableString and assigns it to the Authority field.
func (o *AuthConfigVM) SetAuthority(v string) {
	o.Authority.Set(&v)
}
// SetAuthorityNil sets the value for Authority to be an explicit nil
func (o *AuthConfigVM) SetAuthorityNil() {
	o.Authority.Set(nil)
}

// UnsetAuthority ensures that no value is present for Authority, not even an explicit nil
func (o *AuthConfigVM) UnsetAuthority() {
	o.Authority.Unset()
}

func (o AuthConfigVM) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UseLocal != nil {
		toSerialize["useLocal"] = o.UseLocal
	}
	if o.UseOpenId != nil {
		toSerialize["useOpenId"] = o.UseOpenId
	}
	if o.Authority.IsSet() {
		toSerialize["authority"] = o.Authority.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAuthConfigVM struct {
	value *AuthConfigVM
	isSet bool
}

func (v NullableAuthConfigVM) Get() *AuthConfigVM {
	return v.value
}

func (v *NullableAuthConfigVM) Set(val *AuthConfigVM) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthConfigVM) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthConfigVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthConfigVM(val *AuthConfigVM) *NullableAuthConfigVM {
	return &NullableAuthConfigVM{value: val, isSet: true}
}

func (v NullableAuthConfigVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthConfigVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


