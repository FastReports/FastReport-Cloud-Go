/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// DataSourceExecute the model 'DataSourceExecute'
type DataSourceExecute int32

// List of DataSourceExecute
const (
	_0 DataSourceExecute = 0
	_MINUS_1 DataSourceExecute = -1
)

// All allowed values of DataSourceExecute enum
var AllowedDataSourceExecuteEnumValues = []DataSourceExecute{
	0,
	-1,
}

func (v *DataSourceExecute) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataSourceExecute(value)
	for _, existing := range AllowedDataSourceExecuteEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataSourceExecute", value)
}

// NewDataSourceExecuteFromValue returns a pointer to a valid DataSourceExecute
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataSourceExecuteFromValue(v int32) (*DataSourceExecute, error) {
	ev := DataSourceExecute(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataSourceExecute: valid values are %v", v, AllowedDataSourceExecuteEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataSourceExecute) IsValid() bool {
	for _, existing := range AllowedDataSourceExecuteEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataSourceExecute value
func (v DataSourceExecute) Ptr() *DataSourceExecute {
	return &v
}

type NullableDataSourceExecute struct {
	value *DataSourceExecute
	isSet bool
}

func (v NullableDataSourceExecute) Get() *DataSourceExecute {
	return v.value
}

func (v *NullableDataSourceExecute) Set(val *DataSourceExecute) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceExecute) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceExecute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceExecute(val *DataSourceExecute) *NullableDataSourceExecute {
	return &NullableDataSourceExecute{value: val, isSet: true}
}

func (v NullableDataSourceExecute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceExecute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

