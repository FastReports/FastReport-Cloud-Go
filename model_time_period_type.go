/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// TimePeriodType the model 'TimePeriodType'
type TimePeriodType string

// List of TimePeriodType
const (
	SECOND TimePeriodType = "Second"
	MINUTE TimePeriodType = "Minute"
	HOUR TimePeriodType = "Hour"
	DAY TimePeriodType = "Day"
	WEEK TimePeriodType = "Week"
	MONTH TimePeriodType = "Month"
	YEAR TimePeriodType = "Year"
)

// All allowed values of TimePeriodType enum
var AllowedTimePeriodTypeEnumValues = []TimePeriodType{
	"Second",
	"Minute",
	"Hour",
	"Day",
	"Week",
	"Month",
	"Year",
}

func (v *TimePeriodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimePeriodType(value)
	for _, existing := range AllowedTimePeriodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimePeriodType", value)
}

// NewTimePeriodTypeFromValue returns a pointer to a valid TimePeriodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimePeriodTypeFromValue(v string) (*TimePeriodType, error) {
	ev := TimePeriodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimePeriodType: valid values are %v", v, AllowedTimePeriodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimePeriodType) IsValid() bool {
	for _, existing := range AllowedTimePeriodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimePeriodType value
func (v TimePeriodType) Ptr() *TimePeriodType {
	return &v
}

type NullableTimePeriodType struct {
	value *TimePeriodType
	isSet bool
}

func (v NullableTimePeriodType) Get() *TimePeriodType {
	return v.value
}

func (v *NullableTimePeriodType) Set(val *TimePeriodType) {
	v.value = val
	v.isSet = true
}

func (v NullableTimePeriodType) IsSet() bool {
	return v.isSet
}

func (v *NullableTimePeriodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimePeriodType(val *TimePeriodType) *NullableTimePeriodType {
	return &NullableTimePeriodType{value: val, isSet: true}
}

func (v NullableTimePeriodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimePeriodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

