/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AdminSubscriptionsVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminSubscriptionsVM{}

// AdminSubscriptionsVM struct for AdminSubscriptionsVM
type AdminSubscriptionsVM struct {
	CloudBaseVM
	Subscriptions []AdminSubscriptionVM `json:"subscriptions,omitempty"`
	Count *int64 `json:"count,omitempty"`
	Skip *int32 `json:"skip,omitempty"`
	Take *int32 `json:"take,omitempty"`
	T string `json:"$t"`
}

type _AdminSubscriptionsVM AdminSubscriptionsVM

// NewAdminSubscriptionsVM instantiates a new AdminSubscriptionsVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminSubscriptionsVM(t string) *AdminSubscriptionsVM {
	this := AdminSubscriptionsVM{}
	this.T = t
	return &this
}

// NewAdminSubscriptionsVMWithDefaults instantiates a new AdminSubscriptionsVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminSubscriptionsVMWithDefaults() *AdminSubscriptionsVM {
	this := AdminSubscriptionsVM{}
	return &this
}

// GetSubscriptions returns the Subscriptions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdminSubscriptionsVM) GetSubscriptions() []AdminSubscriptionVM {
	if o == nil {
		var ret []AdminSubscriptionVM
		return ret
	}
	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdminSubscriptionsVM) GetSubscriptionsOk() ([]AdminSubscriptionVM, bool) {
	if o == nil || IsNil(o.Subscriptions) {
		return nil, false
	}
	return o.Subscriptions, true
}

// HasSubscriptions returns a boolean if a field has been set.
func (o *AdminSubscriptionsVM) HasSubscriptions() bool {
	if o != nil && IsNil(o.Subscriptions) {
		return true
	}

	return false
}

// SetSubscriptions gets a reference to the given []AdminSubscriptionVM and assigns it to the Subscriptions field.
func (o *AdminSubscriptionsVM) SetSubscriptions(v []AdminSubscriptionVM) {
	o.Subscriptions = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *AdminSubscriptionsVM) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminSubscriptionsVM) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *AdminSubscriptionsVM) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *AdminSubscriptionsVM) SetCount(v int64) {
	o.Count = &v
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *AdminSubscriptionsVM) GetSkip() int32 {
	if o == nil || IsNil(o.Skip) {
		var ret int32
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminSubscriptionsVM) GetSkipOk() (*int32, bool) {
	if o == nil || IsNil(o.Skip) {
		return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *AdminSubscriptionsVM) HasSkip() bool {
	if o != nil && !IsNil(o.Skip) {
		return true
	}

	return false
}

// SetSkip gets a reference to the given int32 and assigns it to the Skip field.
func (o *AdminSubscriptionsVM) SetSkip(v int32) {
	o.Skip = &v
}

// GetTake returns the Take field value if set, zero value otherwise.
func (o *AdminSubscriptionsVM) GetTake() int32 {
	if o == nil || IsNil(o.Take) {
		var ret int32
		return ret
	}
	return *o.Take
}

// GetTakeOk returns a tuple with the Take field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminSubscriptionsVM) GetTakeOk() (*int32, bool) {
	if o == nil || IsNil(o.Take) {
		return nil, false
	}
	return o.Take, true
}

// HasTake returns a boolean if a field has been set.
func (o *AdminSubscriptionsVM) HasTake() bool {
	if o != nil && !IsNil(o.Take) {
		return true
	}

	return false
}

// SetTake gets a reference to the given int32 and assigns it to the Take field.
func (o *AdminSubscriptionsVM) SetTake(v int32) {
	o.Take = &v
}

// GetT returns the T field value
func (o *AdminSubscriptionsVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *AdminSubscriptionsVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *AdminSubscriptionsVM) SetT(v string) {
	o.T = v
}

func (o AdminSubscriptionsVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminSubscriptionsVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	if o.Subscriptions != nil {
		toSerialize["subscriptions"] = o.Subscriptions
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Skip) {
		toSerialize["skip"] = o.Skip
	}
	if !IsNil(o.Take) {
		toSerialize["take"] = o.Take
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *AdminSubscriptionsVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdminSubscriptionsVM := _AdminSubscriptionsVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAdminSubscriptionsVM)

	if err != nil {
		return err
	}

	*o = AdminSubscriptionsVM(varAdminSubscriptionsVM)

	return err
}

type NullableAdminSubscriptionsVM struct {
	value *AdminSubscriptionsVM
	isSet bool
}

func (v NullableAdminSubscriptionsVM) Get() *AdminSubscriptionsVM {
	return v.value
}

func (v *NullableAdminSubscriptionsVM) Set(val *AdminSubscriptionsVM) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminSubscriptionsVM) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminSubscriptionsVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminSubscriptionsVM(val *AdminSubscriptionsVM) *NullableAdminSubscriptionsVM {
	return &NullableAdminSubscriptionsVM{value: val, isSet: true}
}

func (v NullableAdminSubscriptionsVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminSubscriptionsVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


