/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// SubscriptionGet the model 'SubscriptionGet'
type SubscriptionGet int32

// List of SubscriptionGet
const (
	_0 SubscriptionGet = 0
	_1 SubscriptionGet = 1
	_2 SubscriptionGet = 2
	_4 SubscriptionGet = 4
	_8 SubscriptionGet = 8
	_16 SubscriptionGet = 16
	_32 SubscriptionGet = 32
	_64 SubscriptionGet = 64
	_128 SubscriptionGet = 128
	_256 SubscriptionGet = 256
	_512 SubscriptionGet = 512
	_1024 SubscriptionGet = 1024
	_MINUS_1 SubscriptionGet = -1
)

// All allowed values of SubscriptionGet enum
var AllowedSubscriptionGetEnumValues = []SubscriptionGet{
	0,
	1,
	2,
	4,
	8,
	16,
	32,
	64,
	128,
	256,
	512,
	1024,
	-1,
}

func (v *SubscriptionGet) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionGet(value)
	for _, existing := range AllowedSubscriptionGetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionGet", value)
}

// NewSubscriptionGetFromValue returns a pointer to a valid SubscriptionGet
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionGetFromValue(v int32) (*SubscriptionGet, error) {
	ev := SubscriptionGet(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionGet: valid values are %v", v, AllowedSubscriptionGetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionGet) IsValid() bool {
	for _, existing := range AllowedSubscriptionGetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionGet value
func (v SubscriptionGet) Ptr() *SubscriptionGet {
	return &v
}

type NullableSubscriptionGet struct {
	value *SubscriptionGet
	isSet bool
}

func (v NullableSubscriptionGet) Get() *SubscriptionGet {
	return v.value
}

func (v *NullableSubscriptionGet) Set(val *SubscriptionGet) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionGet) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionGet(val *SubscriptionGet) *NullableSubscriptionGet {
	return &NullableSubscriptionGet{value: val, isSet: true}
}

func (v NullableSubscriptionGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

