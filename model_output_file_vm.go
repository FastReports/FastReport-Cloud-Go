/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OutputFileVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutputFileVM{}

// OutputFileVM struct for OutputFileVM
type OutputFileVM struct {
	CloudBaseVM
	FileName NullableString `json:"fileName,omitempty"`
	FolderId NullableString `json:"folderId,omitempty"`
	Type *FileKind `json:"type,omitempty"`
	IsTemporary *bool `json:"isTemporary,omitempty"`
	T string `json:"$t"`
}

type _OutputFileVM OutputFileVM

// NewOutputFileVM instantiates a new OutputFileVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputFileVM(t string) *OutputFileVM {
	this := OutputFileVM{}
	this.T = t
	return &this
}

// NewOutputFileVMWithDefaults instantiates a new OutputFileVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputFileVMWithDefaults() *OutputFileVM {
	this := OutputFileVM{}
	return &this
}

// GetFileName returns the FileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OutputFileVM) GetFileName() string {
	if o == nil || IsNil(o.FileName.Get()) {
		var ret string
		return ret
	}
	return *o.FileName.Get()
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutputFileVM) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileName.Get(), o.FileName.IsSet()
}

// HasFileName returns a boolean if a field has been set.
func (o *OutputFileVM) HasFileName() bool {
	if o != nil && o.FileName.IsSet() {
		return true
	}

	return false
}

// SetFileName gets a reference to the given NullableString and assigns it to the FileName field.
func (o *OutputFileVM) SetFileName(v string) {
	o.FileName.Set(&v)
}
// SetFileNameNil sets the value for FileName to be an explicit nil
func (o *OutputFileVM) SetFileNameNil() {
	o.FileName.Set(nil)
}

// UnsetFileName ensures that no value is present for FileName, not even an explicit nil
func (o *OutputFileVM) UnsetFileName() {
	o.FileName.Unset()
}

// GetFolderId returns the FolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OutputFileVM) GetFolderId() string {
	if o == nil || IsNil(o.FolderId.Get()) {
		var ret string
		return ret
	}
	return *o.FolderId.Get()
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutputFileVM) GetFolderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FolderId.Get(), o.FolderId.IsSet()
}

// HasFolderId returns a boolean if a field has been set.
func (o *OutputFileVM) HasFolderId() bool {
	if o != nil && o.FolderId.IsSet() {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given NullableString and assigns it to the FolderId field.
func (o *OutputFileVM) SetFolderId(v string) {
	o.FolderId.Set(&v)
}
// SetFolderIdNil sets the value for FolderId to be an explicit nil
func (o *OutputFileVM) SetFolderIdNil() {
	o.FolderId.Set(nil)
}

// UnsetFolderId ensures that no value is present for FolderId, not even an explicit nil
func (o *OutputFileVM) UnsetFolderId() {
	o.FolderId.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OutputFileVM) GetType() FileKind {
	if o == nil || IsNil(o.Type) {
		var ret FileKind
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputFileVM) GetTypeOk() (*FileKind, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OutputFileVM) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given FileKind and assigns it to the Type field.
func (o *OutputFileVM) SetType(v FileKind) {
	o.Type = &v
}

// GetIsTemporary returns the IsTemporary field value if set, zero value otherwise.
func (o *OutputFileVM) GetIsTemporary() bool {
	if o == nil || IsNil(o.IsTemporary) {
		var ret bool
		return ret
	}
	return *o.IsTemporary
}

// GetIsTemporaryOk returns a tuple with the IsTemporary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputFileVM) GetIsTemporaryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTemporary) {
		return nil, false
	}
	return o.IsTemporary, true
}

// HasIsTemporary returns a boolean if a field has been set.
func (o *OutputFileVM) HasIsTemporary() bool {
	if o != nil && !IsNil(o.IsTemporary) {
		return true
	}

	return false
}

// SetIsTemporary gets a reference to the given bool and assigns it to the IsTemporary field.
func (o *OutputFileVM) SetIsTemporary(v bool) {
	o.IsTemporary = &v
}

// GetT returns the T field value
func (o *OutputFileVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *OutputFileVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *OutputFileVM) SetT(v string) {
	o.T = v
}

func (o OutputFileVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutputFileVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	if o.FileName.IsSet() {
		toSerialize["fileName"] = o.FileName.Get()
	}
	if o.FolderId.IsSet() {
		toSerialize["folderId"] = o.FolderId.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.IsTemporary) {
		toSerialize["isTemporary"] = o.IsTemporary
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *OutputFileVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOutputFileVM := _OutputFileVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOutputFileVM)

	if err != nil {
		return err
	}

	*o = OutputFileVM(varOutputFileVM)

	return err
}

type NullableOutputFileVM struct {
	value *OutputFileVM
	isSet bool
}

func (v NullableOutputFileVM) Get() *OutputFileVM {
	return v.value
}

func (v *NullableOutputFileVM) Set(val *OutputFileVM) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputFileVM) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputFileVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputFileVM(val *OutputFileVM) *NullableOutputFileVM {
	return &NullableOutputFileVM{value: val, isSet: true}
}

func (v NullableOutputFileVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputFileVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


