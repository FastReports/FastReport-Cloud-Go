/*
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
)

// AppMixins struct for AppMixins
type AppMixins struct {
	Head NullableString `json:"head,omitempty"`
	Body NullableString `json:"body,omitempty"`
}

// NewAppMixins instantiates a new AppMixins object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppMixins() *AppMixins {
	this := AppMixins{}
	return &this
}

// NewAppMixinsWithDefaults instantiates a new AppMixins object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppMixinsWithDefaults() *AppMixins {
	this := AppMixins{}
	return &this
}

// GetHead returns the Head field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppMixins) GetHead() string {
	if o == nil || o.Head.Get() == nil {
		var ret string
		return ret
	}
	return *o.Head.Get()
}

// GetHeadOk returns a tuple with the Head field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppMixins) GetHeadOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Head.Get(), o.Head.IsSet()
}

// HasHead returns a boolean if a field has been set.
func (o *AppMixins) HasHead() bool {
	if o != nil && o.Head.IsSet() {
		return true
	}

	return false
}

// SetHead gets a reference to the given NullableString and assigns it to the Head field.
func (o *AppMixins) SetHead(v string) {
	o.Head.Set(&v)
}
// SetHeadNil sets the value for Head to be an explicit nil
func (o *AppMixins) SetHeadNil() {
	o.Head.Set(nil)
}

// UnsetHead ensures that no value is present for Head, not even an explicit nil
func (o *AppMixins) UnsetHead() {
	o.Head.Unset()
}

// GetBody returns the Body field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppMixins) GetBody() string {
	if o == nil || o.Body.Get() == nil {
		var ret string
		return ret
	}
	return *o.Body.Get()
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppMixins) GetBodyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Body.Get(), o.Body.IsSet()
}

// HasBody returns a boolean if a field has been set.
func (o *AppMixins) HasBody() bool {
	if o != nil && o.Body.IsSet() {
		return true
	}

	return false
}

// SetBody gets a reference to the given NullableString and assigns it to the Body field.
func (o *AppMixins) SetBody(v string) {
	o.Body.Set(&v)
}
// SetBodyNil sets the value for Body to be an explicit nil
func (o *AppMixins) SetBodyNil() {
	o.Body.Set(nil)
}

// UnsetBody ensures that no value is present for Body, not even an explicit nil
func (o *AppMixins) UnsetBody() {
	o.Body.Unset()
}

func (o AppMixins) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Head.IsSet() {
		toSerialize["head"] = o.Head.Get()
	}
	if o.Body.IsSet() {
		toSerialize["body"] = o.Body.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAppMixins struct {
	value *AppMixins
	isSet bool
}

func (v NullableAppMixins) Get() *AppMixins {
	return v.value
}

func (v *NullableAppMixins) Set(val *AppMixins) {
	v.value = val
	v.isSet = true
}

func (v NullableAppMixins) IsSet() bool {
	return v.isSet
}

func (v *NullableAppMixins) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppMixins(val *AppMixins) *NullableAppMixins {
	return &NullableAppMixins{value: val, isSet: true}
}

func (v NullableAppMixins) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppMixins) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


