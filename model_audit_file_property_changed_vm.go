/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuditFilePropertyChangedVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditFilePropertyChangedVM{}

// AuditFilePropertyChangedVM struct for AuditFilePropertyChangedVM
type AuditFilePropertyChangedVM struct {
	AuditActionVM
	PropertyName NullableString `json:"propertyName,omitempty"`
	OldValue interface{} `json:"oldValue,omitempty"`
	NewValue interface{} `json:"newValue,omitempty"`
	EntityType *EntityType `json:"entityType,omitempty"`
	T string `json:"$t"`
}

type _AuditFilePropertyChangedVM AuditFilePropertyChangedVM

// NewAuditFilePropertyChangedVM instantiates a new AuditFilePropertyChangedVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditFilePropertyChangedVM(t string) *AuditFilePropertyChangedVM {
	this := AuditFilePropertyChangedVM{}
	this.T = t
	return &this
}

// NewAuditFilePropertyChangedVMWithDefaults instantiates a new AuditFilePropertyChangedVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditFilePropertyChangedVMWithDefaults() *AuditFilePropertyChangedVM {
	this := AuditFilePropertyChangedVM{}
	return &this
}

// GetPropertyName returns the PropertyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditFilePropertyChangedVM) GetPropertyName() string {
	if o == nil || IsNil(o.PropertyName.Get()) {
		var ret string
		return ret
	}
	return *o.PropertyName.Get()
}

// GetPropertyNameOk returns a tuple with the PropertyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditFilePropertyChangedVM) GetPropertyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PropertyName.Get(), o.PropertyName.IsSet()
}

// HasPropertyName returns a boolean if a field has been set.
func (o *AuditFilePropertyChangedVM) HasPropertyName() bool {
	if o != nil && o.PropertyName.IsSet() {
		return true
	}

	return false
}

// SetPropertyName gets a reference to the given NullableString and assigns it to the PropertyName field.
func (o *AuditFilePropertyChangedVM) SetPropertyName(v string) {
	o.PropertyName.Set(&v)
}
// SetPropertyNameNil sets the value for PropertyName to be an explicit nil
func (o *AuditFilePropertyChangedVM) SetPropertyNameNil() {
	o.PropertyName.Set(nil)
}

// UnsetPropertyName ensures that no value is present for PropertyName, not even an explicit nil
func (o *AuditFilePropertyChangedVM) UnsetPropertyName() {
	o.PropertyName.Unset()
}

// GetOldValue returns the OldValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditFilePropertyChangedVM) GetOldValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.OldValue
}

// GetOldValueOk returns a tuple with the OldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditFilePropertyChangedVM) GetOldValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.OldValue) {
		return nil, false
	}
	return &o.OldValue, true
}

// HasOldValue returns a boolean if a field has been set.
func (o *AuditFilePropertyChangedVM) HasOldValue() bool {
	if o != nil && IsNil(o.OldValue) {
		return true
	}

	return false
}

// SetOldValue gets a reference to the given interface{} and assigns it to the OldValue field.
func (o *AuditFilePropertyChangedVM) SetOldValue(v interface{}) {
	o.OldValue = v
}

// GetNewValue returns the NewValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditFilePropertyChangedVM) GetNewValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.NewValue
}

// GetNewValueOk returns a tuple with the NewValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditFilePropertyChangedVM) GetNewValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.NewValue) {
		return nil, false
	}
	return &o.NewValue, true
}

// HasNewValue returns a boolean if a field has been set.
func (o *AuditFilePropertyChangedVM) HasNewValue() bool {
	if o != nil && IsNil(o.NewValue) {
		return true
	}

	return false
}

// SetNewValue gets a reference to the given interface{} and assigns it to the NewValue field.
func (o *AuditFilePropertyChangedVM) SetNewValue(v interface{}) {
	o.NewValue = v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *AuditFilePropertyChangedVM) GetEntityType() EntityType {
	if o == nil || IsNil(o.EntityType) {
		var ret EntityType
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditFilePropertyChangedVM) GetEntityTypeOk() (*EntityType, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *AuditFilePropertyChangedVM) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given EntityType and assigns it to the EntityType field.
func (o *AuditFilePropertyChangedVM) SetEntityType(v EntityType) {
	o.EntityType = &v
}

// GetT returns the T field value
func (o *AuditFilePropertyChangedVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *AuditFilePropertyChangedVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *AuditFilePropertyChangedVM) SetT(v string) {
	o.T = v
}

func (o AuditFilePropertyChangedVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditFilePropertyChangedVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedAuditActionVM, errAuditActionVM := json.Marshal(o.AuditActionVM)
	if errAuditActionVM != nil {
		return map[string]interface{}{}, errAuditActionVM
	}
	errAuditActionVM = json.Unmarshal([]byte(serializedAuditActionVM), &toSerialize)
	if errAuditActionVM != nil {
		return map[string]interface{}{}, errAuditActionVM
	}
	if o.PropertyName.IsSet() {
		toSerialize["propertyName"] = o.PropertyName.Get()
	}
	if o.OldValue != nil {
		toSerialize["oldValue"] = o.OldValue
	}
	if o.NewValue != nil {
		toSerialize["newValue"] = o.NewValue
	}
	if !IsNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *AuditFilePropertyChangedVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditFilePropertyChangedVM := _AuditFilePropertyChangedVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuditFilePropertyChangedVM)

	if err != nil {
		return err
	}

	*o = AuditFilePropertyChangedVM(varAuditFilePropertyChangedVM)

	return err
}

type NullableAuditFilePropertyChangedVM struct {
	value *AuditFilePropertyChangedVM
	isSet bool
}

func (v NullableAuditFilePropertyChangedVM) Get() *AuditFilePropertyChangedVM {
	return v.value
}

func (v *NullableAuditFilePropertyChangedVM) Set(val *AuditFilePropertyChangedVM) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditFilePropertyChangedVM) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditFilePropertyChangedVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditFilePropertyChangedVM(val *AuditFilePropertyChangedVM) *NullableAuditFilePropertyChangedVM {
	return &NullableAuditFilePropertyChangedVM{value: val, isSet: true}
}

func (v NullableAuditFilePropertyChangedVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditFilePropertyChangedVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


