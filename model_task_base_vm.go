/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TaskBaseVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskBaseVM{}

// TaskBaseVM struct for TaskBaseVM
type TaskBaseVM struct {
	CloudBaseVM
	CronExpression NullableString `json:"cronExpression,omitempty"`
	StartsOn NullableTime `json:"startsOn,omitempty"`
	Ends *TaskEnd `json:"ends,omitempty"`
	Id NullableString `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	RecurrentRunTime NullableTime `json:"recurrentRunTime,omitempty"`
	RecurrentWasRunTime NullableTime `json:"recurrentWasRunTime,omitempty"`
	SubscriptionId NullableString `json:"subscriptionId,omitempty"`
	T string `json:"$t"`
}

type _TaskBaseVM TaskBaseVM

// NewTaskBaseVM instantiates a new TaskBaseVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskBaseVM(t string) *TaskBaseVM {
	this := TaskBaseVM{}
	this.T = t
	return &this
}

// NewTaskBaseVMWithDefaults instantiates a new TaskBaseVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskBaseVMWithDefaults() *TaskBaseVM {
	this := TaskBaseVM{}
	return &this
}

// GetCronExpression returns the CronExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskBaseVM) GetCronExpression() string {
	if o == nil || IsNil(o.CronExpression.Get()) {
		var ret string
		return ret
	}
	return *o.CronExpression.Get()
}

// GetCronExpressionOk returns a tuple with the CronExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskBaseVM) GetCronExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CronExpression.Get(), o.CronExpression.IsSet()
}

// HasCronExpression returns a boolean if a field has been set.
func (o *TaskBaseVM) HasCronExpression() bool {
	if o != nil && o.CronExpression.IsSet() {
		return true
	}

	return false
}

// SetCronExpression gets a reference to the given NullableString and assigns it to the CronExpression field.
func (o *TaskBaseVM) SetCronExpression(v string) {
	o.CronExpression.Set(&v)
}
// SetCronExpressionNil sets the value for CronExpression to be an explicit nil
func (o *TaskBaseVM) SetCronExpressionNil() {
	o.CronExpression.Set(nil)
}

// UnsetCronExpression ensures that no value is present for CronExpression, not even an explicit nil
func (o *TaskBaseVM) UnsetCronExpression() {
	o.CronExpression.Unset()
}

// GetStartsOn returns the StartsOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskBaseVM) GetStartsOn() time.Time {
	if o == nil || IsNil(o.StartsOn.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartsOn.Get()
}

// GetStartsOnOk returns a tuple with the StartsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskBaseVM) GetStartsOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartsOn.Get(), o.StartsOn.IsSet()
}

// HasStartsOn returns a boolean if a field has been set.
func (o *TaskBaseVM) HasStartsOn() bool {
	if o != nil && o.StartsOn.IsSet() {
		return true
	}

	return false
}

// SetStartsOn gets a reference to the given NullableTime and assigns it to the StartsOn field.
func (o *TaskBaseVM) SetStartsOn(v time.Time) {
	o.StartsOn.Set(&v)
}
// SetStartsOnNil sets the value for StartsOn to be an explicit nil
func (o *TaskBaseVM) SetStartsOnNil() {
	o.StartsOn.Set(nil)
}

// UnsetStartsOn ensures that no value is present for StartsOn, not even an explicit nil
func (o *TaskBaseVM) UnsetStartsOn() {
	o.StartsOn.Unset()
}

// GetEnds returns the Ends field value if set, zero value otherwise.
func (o *TaskBaseVM) GetEnds() TaskEnd {
	if o == nil || IsNil(o.Ends) {
		var ret TaskEnd
		return ret
	}
	return *o.Ends
}

// GetEndsOk returns a tuple with the Ends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskBaseVM) GetEndsOk() (*TaskEnd, bool) {
	if o == nil || IsNil(o.Ends) {
		return nil, false
	}
	return o.Ends, true
}

// HasEnds returns a boolean if a field has been set.
func (o *TaskBaseVM) HasEnds() bool {
	if o != nil && !IsNil(o.Ends) {
		return true
	}

	return false
}

// SetEnds gets a reference to the given TaskEnd and assigns it to the Ends field.
func (o *TaskBaseVM) SetEnds(v TaskEnd) {
	o.Ends = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskBaseVM) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskBaseVM) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *TaskBaseVM) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *TaskBaseVM) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *TaskBaseVM) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *TaskBaseVM) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskBaseVM) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskBaseVM) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TaskBaseVM) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TaskBaseVM) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TaskBaseVM) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TaskBaseVM) UnsetName() {
	o.Name.Unset()
}

// GetRecurrentRunTime returns the RecurrentRunTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskBaseVM) GetRecurrentRunTime() time.Time {
	if o == nil || IsNil(o.RecurrentRunTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RecurrentRunTime.Get()
}

// GetRecurrentRunTimeOk returns a tuple with the RecurrentRunTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskBaseVM) GetRecurrentRunTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurrentRunTime.Get(), o.RecurrentRunTime.IsSet()
}

// HasRecurrentRunTime returns a boolean if a field has been set.
func (o *TaskBaseVM) HasRecurrentRunTime() bool {
	if o != nil && o.RecurrentRunTime.IsSet() {
		return true
	}

	return false
}

// SetRecurrentRunTime gets a reference to the given NullableTime and assigns it to the RecurrentRunTime field.
func (o *TaskBaseVM) SetRecurrentRunTime(v time.Time) {
	o.RecurrentRunTime.Set(&v)
}
// SetRecurrentRunTimeNil sets the value for RecurrentRunTime to be an explicit nil
func (o *TaskBaseVM) SetRecurrentRunTimeNil() {
	o.RecurrentRunTime.Set(nil)
}

// UnsetRecurrentRunTime ensures that no value is present for RecurrentRunTime, not even an explicit nil
func (o *TaskBaseVM) UnsetRecurrentRunTime() {
	o.RecurrentRunTime.Unset()
}

// GetRecurrentWasRunTime returns the RecurrentWasRunTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskBaseVM) GetRecurrentWasRunTime() time.Time {
	if o == nil || IsNil(o.RecurrentWasRunTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RecurrentWasRunTime.Get()
}

// GetRecurrentWasRunTimeOk returns a tuple with the RecurrentWasRunTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskBaseVM) GetRecurrentWasRunTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurrentWasRunTime.Get(), o.RecurrentWasRunTime.IsSet()
}

// HasRecurrentWasRunTime returns a boolean if a field has been set.
func (o *TaskBaseVM) HasRecurrentWasRunTime() bool {
	if o != nil && o.RecurrentWasRunTime.IsSet() {
		return true
	}

	return false
}

// SetRecurrentWasRunTime gets a reference to the given NullableTime and assigns it to the RecurrentWasRunTime field.
func (o *TaskBaseVM) SetRecurrentWasRunTime(v time.Time) {
	o.RecurrentWasRunTime.Set(&v)
}
// SetRecurrentWasRunTimeNil sets the value for RecurrentWasRunTime to be an explicit nil
func (o *TaskBaseVM) SetRecurrentWasRunTimeNil() {
	o.RecurrentWasRunTime.Set(nil)
}

// UnsetRecurrentWasRunTime ensures that no value is present for RecurrentWasRunTime, not even an explicit nil
func (o *TaskBaseVM) UnsetRecurrentWasRunTime() {
	o.RecurrentWasRunTime.Unset()
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskBaseVM) GetSubscriptionId() string {
	if o == nil || IsNil(o.SubscriptionId.Get()) {
		var ret string
		return ret
	}
	return *o.SubscriptionId.Get()
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskBaseVM) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubscriptionId.Get(), o.SubscriptionId.IsSet()
}

// HasSubscriptionId returns a boolean if a field has been set.
func (o *TaskBaseVM) HasSubscriptionId() bool {
	if o != nil && o.SubscriptionId.IsSet() {
		return true
	}

	return false
}

// SetSubscriptionId gets a reference to the given NullableString and assigns it to the SubscriptionId field.
func (o *TaskBaseVM) SetSubscriptionId(v string) {
	o.SubscriptionId.Set(&v)
}
// SetSubscriptionIdNil sets the value for SubscriptionId to be an explicit nil
func (o *TaskBaseVM) SetSubscriptionIdNil() {
	o.SubscriptionId.Set(nil)
}

// UnsetSubscriptionId ensures that no value is present for SubscriptionId, not even an explicit nil
func (o *TaskBaseVM) UnsetSubscriptionId() {
	o.SubscriptionId.Unset()
}

// GetT returns the T field value
func (o *TaskBaseVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *TaskBaseVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *TaskBaseVM) SetT(v string) {
	o.T = v
}

func (o TaskBaseVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskBaseVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	if o.CronExpression.IsSet() {
		toSerialize["cronExpression"] = o.CronExpression.Get()
	}
	if o.StartsOn.IsSet() {
		toSerialize["startsOn"] = o.StartsOn.Get()
	}
	if !IsNil(o.Ends) {
		toSerialize["ends"] = o.Ends
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.RecurrentRunTime.IsSet() {
		toSerialize["recurrentRunTime"] = o.RecurrentRunTime.Get()
	}
	if o.RecurrentWasRunTime.IsSet() {
		toSerialize["recurrentWasRunTime"] = o.RecurrentWasRunTime.Get()
	}
	if o.SubscriptionId.IsSet() {
		toSerialize["subscriptionId"] = o.SubscriptionId.Get()
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *TaskBaseVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskBaseVM := _TaskBaseVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskBaseVM)

	if err != nil {
		return err
	}

	*o = TaskBaseVM(varTaskBaseVM)

	return err
}

type NullableTaskBaseVM struct {
	value *TaskBaseVM
	isSet bool
}

func (v NullableTaskBaseVM) Get() *TaskBaseVM {
	return v.value
}

func (v *NullableTaskBaseVM) Set(val *TaskBaseVM) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskBaseVM) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskBaseVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskBaseVM(val *TaskBaseVM) *NullableTaskBaseVM {
	return &NullableTaskBaseVM{value: val, isSet: true}
}

func (v NullableTaskBaseVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskBaseVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


