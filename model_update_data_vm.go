/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateDataVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDataVM{}

// UpdateDataVM struct for UpdateDataVM
type UpdateDataVM struct {
	CloudBaseVM
	NewData NullableString `json:"newData,omitempty"`
	EditorId NullableString `json:"editorId,omitempty"`
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	T string `json:"$t"`
}

type _UpdateDataVM UpdateDataVM

// NewUpdateDataVM instantiates a new UpdateDataVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDataVM(t string) *UpdateDataVM {
	this := UpdateDataVM{}
	this.T = t
	return &this
}

// NewUpdateDataVMWithDefaults instantiates a new UpdateDataVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDataVMWithDefaults() *UpdateDataVM {
	this := UpdateDataVM{}
	return &this
}

// GetNewData returns the NewData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateDataVM) GetNewData() string {
	if o == nil || IsNil(o.NewData.Get()) {
		var ret string
		return ret
	}
	return *o.NewData.Get()
}

// GetNewDataOk returns a tuple with the NewData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDataVM) GetNewDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewData.Get(), o.NewData.IsSet()
}

// HasNewData returns a boolean if a field has been set.
func (o *UpdateDataVM) HasNewData() bool {
	if o != nil && o.NewData.IsSet() {
		return true
	}

	return false
}

// SetNewData gets a reference to the given NullableString and assigns it to the NewData field.
func (o *UpdateDataVM) SetNewData(v string) {
	o.NewData.Set(&v)
}
// SetNewDataNil sets the value for NewData to be an explicit nil
func (o *UpdateDataVM) SetNewDataNil() {
	o.NewData.Set(nil)
}

// UnsetNewData ensures that no value is present for NewData, not even an explicit nil
func (o *UpdateDataVM) UnsetNewData() {
	o.NewData.Unset()
}

// GetEditorId returns the EditorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateDataVM) GetEditorId() string {
	if o == nil || IsNil(o.EditorId.Get()) {
		var ret string
		return ret
	}
	return *o.EditorId.Get()
}

// GetEditorIdOk returns a tuple with the EditorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDataVM) GetEditorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EditorId.Get(), o.EditorId.IsSet()
}

// HasEditorId returns a boolean if a field has been set.
func (o *UpdateDataVM) HasEditorId() bool {
	if o != nil && o.EditorId.IsSet() {
		return true
	}

	return false
}

// SetEditorId gets a reference to the given NullableString and assigns it to the EditorId field.
func (o *UpdateDataVM) SetEditorId(v string) {
	o.EditorId.Set(&v)
}
// SetEditorIdNil sets the value for EditorId to be an explicit nil
func (o *UpdateDataVM) SetEditorIdNil() {
	o.EditorId.Set(nil)
}

// UnsetEditorId ensures that no value is present for EditorId, not even an explicit nil
func (o *UpdateDataVM) UnsetEditorId() {
	o.EditorId.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateDataVM) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDataVM) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *UpdateDataVM) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *UpdateDataVM) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *UpdateDataVM) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *UpdateDataVM) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetT returns the T field value
func (o *UpdateDataVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *UpdateDataVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *UpdateDataVM) SetT(v string) {
	o.T = v
}

func (o UpdateDataVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDataVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	if o.NewData.IsSet() {
		toSerialize["newData"] = o.NewData.Get()
	}
	if o.EditorId.IsSet() {
		toSerialize["editorId"] = o.EditorId.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *UpdateDataVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateDataVM := _UpdateDataVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateDataVM)

	if err != nil {
		return err
	}

	*o = UpdateDataVM(varUpdateDataVM)

	return err
}

type NullableUpdateDataVM struct {
	value *UpdateDataVM
	isSet bool
}

func (v NullableUpdateDataVM) Get() *UpdateDataVM {
	return v.value
}

func (v *NullableUpdateDataVM) Set(val *UpdateDataVM) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDataVM) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDataVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDataVM(val *UpdateDataVM) *NullableUpdateDataVM {
	return &NullableUpdateDataVM{value: val, isSet: true}
}

func (v NullableUpdateDataVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDataVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


