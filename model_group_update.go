/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// GroupUpdate the model 'GroupUpdate'
type GroupUpdate int32

// List of GroupUpdate
const (
	_0 GroupUpdate = 0
	_1 GroupUpdate = 1
	_MINUS_1 GroupUpdate = -1
)

// All allowed values of GroupUpdate enum
var AllowedGroupUpdateEnumValues = []GroupUpdate{
	0,
	1,
	-1,
}

func (v *GroupUpdate) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupUpdate(value)
	for _, existing := range AllowedGroupUpdateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupUpdate", value)
}

// NewGroupUpdateFromValue returns a pointer to a valid GroupUpdate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupUpdateFromValue(v int32) (*GroupUpdate, error) {
	ev := GroupUpdate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupUpdate: valid values are %v", v, AllowedGroupUpdateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupUpdate) IsValid() bool {
	for _, existing := range AllowedGroupUpdateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupUpdate value
func (v GroupUpdate) Ptr() *GroupUpdate {
	return &v
}

type NullableGroupUpdate struct {
	value *GroupUpdate
	isSet bool
}

func (v NullableGroupUpdate) Get() *GroupUpdate {
	return v.value
}

func (v *NullableGroupUpdate) Set(val *GroupUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupUpdate(val *GroupUpdate) *NullableGroupUpdate {
	return &NullableGroupUpdate{value: val, isSet: true}
}

func (v NullableGroupUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

