/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// AdminGet the model 'AdminGet'
type AdminGet int32

// List of AdminGet
const (
	_0 AdminGet = 0
	_1 AdminGet = 1
	_2 AdminGet = 2
	_4 AdminGet = 4
	_8 AdminGet = 8
	_16 AdminGet = 16
	_32 AdminGet = 32
	_64 AdminGet = 64
	_128 AdminGet = 128
	_256 AdminGet = 256
	_512 AdminGet = 512
	_MINUS_1 AdminGet = -1
)

// All allowed values of AdminGet enum
var AllowedAdminGetEnumValues = []AdminGet{
	0,
	1,
	2,
	4,
	8,
	16,
	32,
	64,
	128,
	256,
	512,
	-1,
}

func (v *AdminGet) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdminGet(value)
	for _, existing := range AllowedAdminGetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdminGet", value)
}

// NewAdminGetFromValue returns a pointer to a valid AdminGet
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdminGetFromValue(v int32) (*AdminGet, error) {
	ev := AdminGet(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdminGet: valid values are %v", v, AllowedAdminGetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdminGet) IsValid() bool {
	for _, existing := range AllowedAdminGetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdminGet value
func (v AdminGet) Ptr() *AdminGet {
	return &v
}

type NullableAdminGet struct {
	value *AdminGet
	isSet bool
}

func (v NullableAdminGet) Get() *AdminGet {
	return v.value
}

func (v *NullableAdminGet) Set(val *AdminGet) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminGet) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminGet(val *AdminGet) *NullableAdminGet {
	return &NullableAdminGet{value: val, isSet: true}
}

func (v NullableAdminGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

