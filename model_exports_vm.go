/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExportsVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportsVM{}

// ExportsVM struct for ExportsVM
type ExportsVM struct {
	FilesVMBase
	Files []ExportVM `json:"files,omitempty"`
	T string `json:"$t"`
}

type _ExportsVM ExportsVM

// NewExportsVM instantiates a new ExportsVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportsVM(t string) *ExportsVM {
	this := ExportsVM{}
	this.T = t
	return &this
}

// NewExportsVMWithDefaults instantiates a new ExportsVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportsVMWithDefaults() *ExportsVM {
	this := ExportsVM{}
	return &this
}

// GetFiles returns the Files field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExportsVM) GetFiles() []ExportVM {
	if o == nil {
		var ret []ExportVM
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExportsVM) GetFilesOk() ([]ExportVM, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *ExportsVM) HasFiles() bool {
	if o != nil && IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []ExportVM and assigns it to the Files field.
func (o *ExportsVM) SetFiles(v []ExportVM) {
	o.Files = v
}

// GetT returns the T field value
func (o *ExportsVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *ExportsVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *ExportsVM) SetT(v string) {
	o.T = v
}

func (o ExportsVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportsVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedFilesVMBase, errFilesVMBase := json.Marshal(o.FilesVMBase)
	if errFilesVMBase != nil {
		return map[string]interface{}{}, errFilesVMBase
	}
	errFilesVMBase = json.Unmarshal([]byte(serializedFilesVMBase), &toSerialize)
	if errFilesVMBase != nil {
		return map[string]interface{}{}, errFilesVMBase
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *ExportsVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExportsVM := _ExportsVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExportsVM)

	if err != nil {
		return err
	}

	*o = ExportsVM(varExportsVM)

	return err
}

type NullableExportsVM struct {
	value *ExportsVM
	isSet bool
}

func (v NullableExportsVM) Get() *ExportsVM {
	return v.value
}

func (v *NullableExportsVM) Set(val *ExportsVM) {
	v.value = val
	v.isSet = true
}

func (v NullableExportsVM) IsSet() bool {
	return v.isSet
}

func (v *NullableExportsVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportsVM(val *ExportsVM) *NullableExportsVM {
	return &NullableExportsVM{value: val, isSet: true}
}

func (v NullableExportsVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportsVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


