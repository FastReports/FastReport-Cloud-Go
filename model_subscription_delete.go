/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// SubscriptionDelete the model 'SubscriptionDelete'
type SubscriptionDelete int32

// List of SubscriptionDelete
const (
	_0 SubscriptionDelete = 0
	_1 SubscriptionDelete = 1
	_2 SubscriptionDelete = 2
	_4 SubscriptionDelete = 4
	_8 SubscriptionDelete = 8
	_MINUS_1 SubscriptionDelete = -1
)

// All allowed values of SubscriptionDelete enum
var AllowedSubscriptionDeleteEnumValues = []SubscriptionDelete{
	0,
	1,
	2,
	4,
	8,
	-1,
}

func (v *SubscriptionDelete) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionDelete(value)
	for _, existing := range AllowedSubscriptionDeleteEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionDelete", value)
}

// NewSubscriptionDeleteFromValue returns a pointer to a valid SubscriptionDelete
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionDeleteFromValue(v int32) (*SubscriptionDelete, error) {
	ev := SubscriptionDelete(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionDelete: valid values are %v", v, AllowedSubscriptionDeleteEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionDelete) IsValid() bool {
	for _, existing := range AllowedSubscriptionDeleteEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionDelete value
func (v SubscriptionDelete) Ptr() *SubscriptionDelete {
	return &v
}

type NullableSubscriptionDelete struct {
	value *SubscriptionDelete
	isSet bool
}

func (v NullableSubscriptionDelete) Get() *SubscriptionDelete {
	return v.value
}

func (v *NullableSubscriptionDelete) Set(val *SubscriptionDelete) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionDelete) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionDelete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionDelete(val *SubscriptionDelete) *NullableSubscriptionDelete {
	return &NullableSubscriptionDelete{value: val, isSet: true}
}

func (v NullableSubscriptionDelete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionDelete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

