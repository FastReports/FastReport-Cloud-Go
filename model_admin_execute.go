/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// AdminExecute the model 'AdminExecute'
type AdminExecute int32

// List of AdminExecute
const (
	_0 AdminExecute = 0
	_1 AdminExecute = 1
	_2 AdminExecute = 2
	_4 AdminExecute = 4
	_8 AdminExecute = 8
	_16 AdminExecute = 16
	_MINUS_1 AdminExecute = -1
)

// All allowed values of AdminExecute enum
var AllowedAdminExecuteEnumValues = []AdminExecute{
	0,
	1,
	2,
	4,
	8,
	16,
	-1,
}

func (v *AdminExecute) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdminExecute(value)
	for _, existing := range AllowedAdminExecuteEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdminExecute", value)
}

// NewAdminExecuteFromValue returns a pointer to a valid AdminExecute
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdminExecuteFromValue(v int32) (*AdminExecute, error) {
	ev := AdminExecute(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdminExecute: valid values are %v", v, AllowedAdminExecuteEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdminExecute) IsValid() bool {
	for _, existing := range AllowedAdminExecuteEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdminExecute value
func (v AdminExecute) Ptr() *AdminExecute {
	return &v
}

type NullableAdminExecute struct {
	value *AdminExecute
	isSet bool
}

func (v NullableAdminExecute) Get() *AdminExecute {
	return v.value
}

func (v *NullableAdminExecute) Set(val *AdminExecute) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminExecute) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminExecute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminExecute(val *AdminExecute) *NullableAdminExecute {
	return &NullableAdminExecute{value: val, isSet: true}
}

func (v NullableAdminExecute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminExecute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

