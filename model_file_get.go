/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// FileGet the model 'FileGet'
type FileGet int32

// List of FileGet
const (
	_0 FileGet = 0
	_1 FileGet = 1
	_2 FileGet = 2
	_4 FileGet = 4
	_8 FileGet = 8
	_16 FileGet = 16
	_32 FileGet = 32
	_MINUS_1 FileGet = -1
)

// All allowed values of FileGet enum
var AllowedFileGetEnumValues = []FileGet{
	0,
	1,
	2,
	4,
	8,
	16,
	32,
	-1,
}

func (v *FileGet) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileGet(value)
	for _, existing := range AllowedFileGetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileGet", value)
}

// NewFileGetFromValue returns a pointer to a valid FileGet
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileGetFromValue(v int32) (*FileGet, error) {
	ev := FileGet(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileGet: valid values are %v", v, AllowedFileGetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileGet) IsValid() bool {
	for _, existing := range AllowedFileGetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileGet value
func (v FileGet) Ptr() *FileGet {
	return &v
}

type NullableFileGet struct {
	value *FileGet
	isSet bool
}

func (v NullableFileGet) Get() *FileGet {
	return v.value
}

func (v *NullableFileGet) Set(val *FileGet) {
	v.value = val
	v.isSet = true
}

func (v NullableFileGet) IsSet() bool {
	return v.isSet
}

func (v *NullableFileGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileGet(val *FileGet) *NullableFileGet {
	return &NullableFileGet{value: val, isSet: true}
}

func (v NullableFileGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

