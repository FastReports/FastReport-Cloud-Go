/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// FileStatusReason the model 'FileStatusReason'
type FileStatusReason string

// List of FileStatusReason
const (
	NONE FileStatusReason = "None"
	ALL_RIGHT FileStatusReason = "AllRight"
	HANG FileStatusReason = "Hang"
	ERROR FileStatusReason = "Error"
	NOT_FOUND FileStatusReason = "NotFound"
	NOT_ENOUGH_SPACE FileStatusReason = "NotEnoughSpace"
	EXPORT_STARTED FileStatusReason = "ExportStarted"
	PREPARATION_STARTED FileStatusReason = "PreparationStarted"
	CRASH_LOOP FileStatusReason = "CrashLoop"
)

// All allowed values of FileStatusReason enum
var AllowedFileStatusReasonEnumValues = []FileStatusReason{
	"None",
	"AllRight",
	"Hang",
	"Error",
	"NotFound",
	"NotEnoughSpace",
	"ExportStarted",
	"PreparationStarted",
	"CrashLoop",
}

func (v *FileStatusReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileStatusReason(value)
	for _, existing := range AllowedFileStatusReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileStatusReason", value)
}

// NewFileStatusReasonFromValue returns a pointer to a valid FileStatusReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileStatusReasonFromValue(v string) (*FileStatusReason, error) {
	ev := FileStatusReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileStatusReason: valid values are %v", v, AllowedFileStatusReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileStatusReason) IsValid() bool {
	for _, existing := range AllowedFileStatusReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileStatusReason value
func (v FileStatusReason) Ptr() *FileStatusReason {
	return &v
}

type NullableFileStatusReason struct {
	value *FileStatusReason
	isSet bool
}

func (v NullableFileStatusReason) Get() *FileStatusReason {
	return v.value
}

func (v *NullableFileStatusReason) Set(val *FileStatusReason) {
	v.value = val
	v.isSet = true
}

func (v NullableFileStatusReason) IsSet() bool {
	return v.isSet
}

func (v *NullableFileStatusReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileStatusReason(val *FileStatusReason) *NullableFileStatusReason {
	return &NullableFileStatusReason{value: val, isSet: true}
}

func (v NullableFileStatusReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileStatusReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

