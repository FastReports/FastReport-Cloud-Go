/*
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
)

// SubscriptionPlansVM struct for SubscriptionPlansVM
type SubscriptionPlansVM struct {
	SubscriptionPlans *[]SubscriptionPlanVM `json:"subscriptionPlans,omitempty"`
	Count *int64 `json:"count,omitempty"`
	Skip *int32 `json:"skip,omitempty"`
	Take *int32 `json:"take,omitempty"`
}

// NewSubscriptionPlansVM instantiates a new SubscriptionPlansVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPlansVM() *SubscriptionPlansVM {
	this := SubscriptionPlansVM{}
	return &this
}

// NewSubscriptionPlansVMWithDefaults instantiates a new SubscriptionPlansVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPlansVMWithDefaults() *SubscriptionPlansVM {
	this := SubscriptionPlansVM{}
	return &this
}

// GetSubscriptionPlans returns the SubscriptionPlans field value if set, zero value otherwise.
func (o *SubscriptionPlansVM) GetSubscriptionPlans() []SubscriptionPlanVM {
	if o == nil || o.SubscriptionPlans == nil {
		var ret []SubscriptionPlanVM
		return ret
	}
	return *o.SubscriptionPlans
}

// GetSubscriptionPlansOk returns a tuple with the SubscriptionPlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlansVM) GetSubscriptionPlansOk() (*[]SubscriptionPlanVM, bool) {
	if o == nil || o.SubscriptionPlans == nil {
		return nil, false
	}
	return o.SubscriptionPlans, true
}

// HasSubscriptionPlans returns a boolean if a field has been set.
func (o *SubscriptionPlansVM) HasSubscriptionPlans() bool {
	if o != nil && o.SubscriptionPlans != nil {
		return true
	}

	return false
}

// SetSubscriptionPlans gets a reference to the given []SubscriptionPlanVM and assigns it to the SubscriptionPlans field.
func (o *SubscriptionPlansVM) SetSubscriptionPlans(v []SubscriptionPlanVM) {
	o.SubscriptionPlans = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *SubscriptionPlansVM) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlansVM) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *SubscriptionPlansVM) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *SubscriptionPlansVM) SetCount(v int64) {
	o.Count = &v
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *SubscriptionPlansVM) GetSkip() int32 {
	if o == nil || o.Skip == nil {
		var ret int32
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlansVM) GetSkipOk() (*int32, bool) {
	if o == nil || o.Skip == nil {
		return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *SubscriptionPlansVM) HasSkip() bool {
	if o != nil && o.Skip != nil {
		return true
	}

	return false
}

// SetSkip gets a reference to the given int32 and assigns it to the Skip field.
func (o *SubscriptionPlansVM) SetSkip(v int32) {
	o.Skip = &v
}

// GetTake returns the Take field value if set, zero value otherwise.
func (o *SubscriptionPlansVM) GetTake() int32 {
	if o == nil || o.Take == nil {
		var ret int32
		return ret
	}
	return *o.Take
}

// GetTakeOk returns a tuple with the Take field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlansVM) GetTakeOk() (*int32, bool) {
	if o == nil || o.Take == nil {
		return nil, false
	}
	return o.Take, true
}

// HasTake returns a boolean if a field has been set.
func (o *SubscriptionPlansVM) HasTake() bool {
	if o != nil && o.Take != nil {
		return true
	}

	return false
}

// SetTake gets a reference to the given int32 and assigns it to the Take field.
func (o *SubscriptionPlansVM) SetTake(v int32) {
	o.Take = &v
}

func (o SubscriptionPlansVM) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SubscriptionPlans != nil {
		toSerialize["subscriptionPlans"] = o.SubscriptionPlans
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Skip != nil {
		toSerialize["skip"] = o.Skip
	}
	if o.Take != nil {
		toSerialize["take"] = o.Take
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriptionPlansVM struct {
	value *SubscriptionPlansVM
	isSet bool
}

func (v NullableSubscriptionPlansVM) Get() *SubscriptionPlansVM {
	return v.value
}

func (v *NullableSubscriptionPlansVM) Set(val *SubscriptionPlansVM) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPlansVM) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPlansVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPlansVM(val *SubscriptionPlansVM) *NullableSubscriptionPlansVM {
	return &NullableSubscriptionPlansVM{value: val, isSet: true}
}

func (v NullableSubscriptionPlansVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPlansVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


