/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// TaskDelete the model 'TaskDelete'
type TaskDelete int32

// List of TaskDelete
const (
	_0 TaskDelete = 0
	_1 TaskDelete = 1
	_MINUS_1 TaskDelete = -1
)

// All allowed values of TaskDelete enum
var AllowedTaskDeleteEnumValues = []TaskDelete{
	0,
	1,
	-1,
}

func (v *TaskDelete) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaskDelete(value)
	for _, existing := range AllowedTaskDeleteEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaskDelete", value)
}

// NewTaskDeleteFromValue returns a pointer to a valid TaskDelete
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaskDeleteFromValue(v int32) (*TaskDelete, error) {
	ev := TaskDelete(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaskDelete: valid values are %v", v, AllowedTaskDeleteEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaskDelete) IsValid() bool {
	for _, existing := range AllowedTaskDeleteEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaskDelete value
func (v TaskDelete) Ptr() *TaskDelete {
	return &v
}

type NullableTaskDelete struct {
	value *TaskDelete
	isSet bool
}

func (v NullableTaskDelete) Get() *TaskDelete {
	return v.value
}

func (v *NullableTaskDelete) Set(val *TaskDelete) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskDelete) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskDelete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskDelete(val *TaskDelete) *NullableTaskDelete {
	return &NullableTaskDelete{value: val, isSet: true}
}

func (v NullableTaskDelete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskDelete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

