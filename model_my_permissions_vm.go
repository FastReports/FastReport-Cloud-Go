/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MyPermissionsVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MyPermissionsVM{}

// MyPermissionsVM struct for MyPermissionsVM
type MyPermissionsVM struct {
	CloudBaseVM
	Subscription *SubscriptionPermissionCRUDVM `json:"subscription,omitempty"`
	Files *FilePermissionCRUDVM `json:"files,omitempty"`
	Datasources *DataSourcePermissionCRUDVM `json:"datasources,omitempty"`
	Groups *GroupPermissionCRUDVM `json:"groups,omitempty"`
	Tasks *TaskPermissionCRUDVM `json:"tasks,omitempty"`
	T string `json:"$t"`
}

type _MyPermissionsVM MyPermissionsVM

// NewMyPermissionsVM instantiates a new MyPermissionsVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMyPermissionsVM(t string) *MyPermissionsVM {
	this := MyPermissionsVM{}
	this.T = t
	return &this
}

// NewMyPermissionsVMWithDefaults instantiates a new MyPermissionsVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMyPermissionsVMWithDefaults() *MyPermissionsVM {
	this := MyPermissionsVM{}
	return &this
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *MyPermissionsVM) GetSubscription() SubscriptionPermissionCRUDVM {
	if o == nil || IsNil(o.Subscription) {
		var ret SubscriptionPermissionCRUDVM
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyPermissionsVM) GetSubscriptionOk() (*SubscriptionPermissionCRUDVM, bool) {
	if o == nil || IsNil(o.Subscription) {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *MyPermissionsVM) HasSubscription() bool {
	if o != nil && !IsNil(o.Subscription) {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given SubscriptionPermissionCRUDVM and assigns it to the Subscription field.
func (o *MyPermissionsVM) SetSubscription(v SubscriptionPermissionCRUDVM) {
	o.Subscription = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *MyPermissionsVM) GetFiles() FilePermissionCRUDVM {
	if o == nil || IsNil(o.Files) {
		var ret FilePermissionCRUDVM
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyPermissionsVM) GetFilesOk() (*FilePermissionCRUDVM, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *MyPermissionsVM) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given FilePermissionCRUDVM and assigns it to the Files field.
func (o *MyPermissionsVM) SetFiles(v FilePermissionCRUDVM) {
	o.Files = &v
}

// GetDatasources returns the Datasources field value if set, zero value otherwise.
func (o *MyPermissionsVM) GetDatasources() DataSourcePermissionCRUDVM {
	if o == nil || IsNil(o.Datasources) {
		var ret DataSourcePermissionCRUDVM
		return ret
	}
	return *o.Datasources
}

// GetDatasourcesOk returns a tuple with the Datasources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyPermissionsVM) GetDatasourcesOk() (*DataSourcePermissionCRUDVM, bool) {
	if o == nil || IsNil(o.Datasources) {
		return nil, false
	}
	return o.Datasources, true
}

// HasDatasources returns a boolean if a field has been set.
func (o *MyPermissionsVM) HasDatasources() bool {
	if o != nil && !IsNil(o.Datasources) {
		return true
	}

	return false
}

// SetDatasources gets a reference to the given DataSourcePermissionCRUDVM and assigns it to the Datasources field.
func (o *MyPermissionsVM) SetDatasources(v DataSourcePermissionCRUDVM) {
	o.Datasources = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *MyPermissionsVM) GetGroups() GroupPermissionCRUDVM {
	if o == nil || IsNil(o.Groups) {
		var ret GroupPermissionCRUDVM
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyPermissionsVM) GetGroupsOk() (*GroupPermissionCRUDVM, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *MyPermissionsVM) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given GroupPermissionCRUDVM and assigns it to the Groups field.
func (o *MyPermissionsVM) SetGroups(v GroupPermissionCRUDVM) {
	o.Groups = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *MyPermissionsVM) GetTasks() TaskPermissionCRUDVM {
	if o == nil || IsNil(o.Tasks) {
		var ret TaskPermissionCRUDVM
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyPermissionsVM) GetTasksOk() (*TaskPermissionCRUDVM, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *MyPermissionsVM) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given TaskPermissionCRUDVM and assigns it to the Tasks field.
func (o *MyPermissionsVM) SetTasks(v TaskPermissionCRUDVM) {
	o.Tasks = &v
}

// GetT returns the T field value
func (o *MyPermissionsVM) GetT() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *MyPermissionsVM) GetTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *MyPermissionsVM) SetT(v string) {
	o.T = v
}

func (o MyPermissionsVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MyPermissionsVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBaseVM, errCloudBaseVM := json.Marshal(o.CloudBaseVM)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	errCloudBaseVM = json.Unmarshal([]byte(serializedCloudBaseVM), &toSerialize)
	if errCloudBaseVM != nil {
		return map[string]interface{}{}, errCloudBaseVM
	}
	if !IsNil(o.Subscription) {
		toSerialize["subscription"] = o.Subscription
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.Datasources) {
		toSerialize["datasources"] = o.Datasources
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	toSerialize["$t"] = o.T
	return toSerialize, nil
}

func (o *MyPermissionsVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"$t",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMyPermissionsVM := _MyPermissionsVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMyPermissionsVM)

	if err != nil {
		return err
	}

	*o = MyPermissionsVM(varMyPermissionsVM)

	return err
}

type NullableMyPermissionsVM struct {
	value *MyPermissionsVM
	isSet bool
}

func (v NullableMyPermissionsVM) Get() *MyPermissionsVM {
	return v.value
}

func (v *NullableMyPermissionsVM) Set(val *MyPermissionsVM) {
	v.value = val
	v.isSet = true
}

func (v NullableMyPermissionsVM) IsSet() bool {
	return v.isSet
}

func (v *NullableMyPermissionsVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMyPermissionsVM(val *MyPermissionsVM) *NullableMyPermissionsVM {
	return &NullableMyPermissionsVM{value: val, isSet: true}
}

func (v NullableMyPermissionsVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMyPermissionsVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


