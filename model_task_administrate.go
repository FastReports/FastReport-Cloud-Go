/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// TaskAdministrate the model 'TaskAdministrate'
type TaskAdministrate int32

// List of TaskAdministrate
const (
	_0 TaskAdministrate = 0
	_1 TaskAdministrate = 1
	_2 TaskAdministrate = 2
	_4 TaskAdministrate = 4
	_8 TaskAdministrate = 8
	_MINUS_1 TaskAdministrate = -1
)

// All allowed values of TaskAdministrate enum
var AllowedTaskAdministrateEnumValues = []TaskAdministrate{
	0,
	1,
	2,
	4,
	8,
	-1,
}

func (v *TaskAdministrate) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaskAdministrate(value)
	for _, existing := range AllowedTaskAdministrateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaskAdministrate", value)
}

// NewTaskAdministrateFromValue returns a pointer to a valid TaskAdministrate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaskAdministrateFromValue(v int32) (*TaskAdministrate, error) {
	ev := TaskAdministrate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaskAdministrate: valid values are %v", v, AllowedTaskAdministrateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaskAdministrate) IsValid() bool {
	for _, existing := range AllowedTaskAdministrateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaskAdministrate value
func (v TaskAdministrate) Ptr() *TaskAdministrate {
	return &v
}

type NullableTaskAdministrate struct {
	value *TaskAdministrate
	isSet bool
}

func (v NullableTaskAdministrate) Get() *TaskAdministrate {
	return v.value
}

func (v *NullableTaskAdministrate) Set(val *TaskAdministrate) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskAdministrate) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskAdministrate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskAdministrate(val *TaskAdministrate) *NullableTaskAdministrate {
	return &NullableTaskAdministrate{value: val, isSet: true}
}

func (v NullableTaskAdministrate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskAdministrate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

