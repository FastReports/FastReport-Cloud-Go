/*
FastReport Cloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gofrcloud

import (
	"encoding/json"
	"fmt"
)

// AdminCreate the model 'AdminCreate'
type AdminCreate int32

// List of AdminCreate
const (
	_0 AdminCreate = 0
	_1 AdminCreate = 1
	_2 AdminCreate = 2
	_4 AdminCreate = 4
	_8 AdminCreate = 8
	_16 AdminCreate = 16
	_32 AdminCreate = 32
	_64 AdminCreate = 64
	_128 AdminCreate = 128
	_MINUS_1 AdminCreate = -1
)

// All allowed values of AdminCreate enum
var AllowedAdminCreateEnumValues = []AdminCreate{
	0,
	1,
	2,
	4,
	8,
	16,
	32,
	64,
	128,
	-1,
}

func (v *AdminCreate) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdminCreate(value)
	for _, existing := range AllowedAdminCreateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdminCreate", value)
}

// NewAdminCreateFromValue returns a pointer to a valid AdminCreate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdminCreateFromValue(v int32) (*AdminCreate, error) {
	ev := AdminCreate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdminCreate: valid values are %v", v, AllowedAdminCreateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdminCreate) IsValid() bool {
	for _, existing := range AllowedAdminCreateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdminCreate value
func (v AdminCreate) Ptr() *AdminCreate {
	return &v
}

type NullableAdminCreate struct {
	value *AdminCreate
	isSet bool
}

func (v NullableAdminCreate) Get() *AdminCreate {
	return v.value
}

func (v *NullableAdminCreate) Set(val *AdminCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminCreate(val *AdminCreate) *NullableAdminCreate {
	return &NullableAdminCreate{value: val, isSet: true}
}

func (v NullableAdminCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

